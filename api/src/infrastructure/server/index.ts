import express, { Response as ExResponse, Request as ExRequest } from 'express';
import bodyParser from 'body-parser';
import cookieParser from 'cookie-parser';
import swaggerUi from 'swagger-ui-express';
import cors from 'cors';
import path from 'path';

import errorMiddleware from './middlewares/error_middlewares';
import { RegisterRoutes } from './routes';
import { connect as connectRepo } from '../db';
import pino, { stdSerializers } from 'pino-http';
import { logger } from '../../utils/logger';
import { seedTeachers } from '../../services/teachers';
import { seedParents } from '../../services/user';

export const SWAGGER_URL = '/docs';

/**
 * Starts the express server and connects to the database.
 */
export const start = async (port = 3000): Promise<void> => {
	const server = express();

	/**
	 * Parses bodies of requests sanely.
	 */
	server.use(
		bodyParser.urlencoded({
			extended: true,
		}),
	);

	server.use(
		pino({
			logger,
			serializers: {
				req: stdSerializers.req,
				res: stdSerializers.res,
				error: stdSerializers.err,
			},
		}),
	);

	/**
	 * Allows to send JSON payloads.
	 */
	server.use(
		bodyParser.json({
			verify: (req: any, res: any, buf: Buffer) => {
				const r = buf?.toString('utf8');
				// if url is /user/questionnaire
				if ((req.url as string).includes('/user/questionnaire')) {
					console.log('Raw body:', r);
				}
			},
		}),
	);

	server.use(cookieParser());

	/**
	 * Configure cors for different environments.
	 */
	server.use(
		cors({
			// origin: config.WEB_URL,
			// use global cors for now
			origin: '*',
			methods: 'GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS',
			// credentials: true,
		}),
	);

	// console.log('CORS configured for:', config.WEB_URL);

	/**
	 * Expose the Swagger interface at the /docs endpoint.
	 */
	server.use(SWAGGER_URL, swaggerUi.serve, async (req: ExRequest, res: ExResponse) => {
		/**
		 * swagger.json is generated by tsoa.  Its location is defined in
		 * "tsoa.json" - "routesDir"
		 */
		res.send(swaggerUi.generateHTML(await import('./swagger.json')));
	});

	/**
	 * "RegisterRoutes" is generated by tsoa.  This simply hooks up the auto
	 * generator controllers to express.
	 */
	RegisterRoutes(server);

	/**
	 * You want to expose the native swagger.json file as well for the front-end
	 * to read (the front-end uses orval to sync the api's data)
	 */
	server.get('/swagger.json', (req, res) => {
		res.sendFile(path.join(__dirname, './swagger.json'));
	});

	/**
	 * Handles errors gracefully - so that it returns errors in a consistent and
	 * predictable way.
	 */
	server.use(errorMiddleware);

	// logger.info({
	// 	NODE_ENV: NODE_ENV,
	// });

	/**
	 * Connects to the db.
	 */
	try {
		await connectRepo();
		console.log(`You are now connected to the`); // ${connection.name} DB`);

		console.log('Seeding...');
		const teacherIds = await seedTeachers();
		await seedParents(teacherIds);
		console.log('Seeding complete');
	} catch (err) {
		console.warn('Failed to connect to db: ', err);
		throw err;
	}

	/**
	 * Actually starts the server.
	 */
	server.listen(port, () => {
		console.log(`App listening at port:${port}`);
	});
};
