/**
 * Generated by orval v7.1.1 🍺
 * Do not edit manually.
 * pam-ai-whatsapp
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
    DefinedInitialDataOptions,
    DefinedUseQueryResult,
    MutationFunction,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseMutationOptions,
    UseMutationResult,
    UseQueryOptions,
    UseQueryResult,
} from '@tanstack/react-query';
import type {
    AuthCallbackParams,
    BookingDotComCitiesOrAirportsResponse,
    BookingDotComFlightBookingUrlResponse,
    BookingDotComFlightResponse,
    ConvertPdfToImageBody,
    ConvertPdfToImageParams,
    CreateListParams,
    CreateMessageParams,
    CreateReminderParams,
    DeleteMessagesParams,
    DeleteUserParams,
    EmbeddingFileListResponse,
    GetFlightBookingUrlParams,
    GetFlightOffersParams,
    GetTriviaBankParams,
    GetUserParams,
    GetWeather200,
    GetWeatherParams,
    ListGetResponse,
    ListListsParams,
    ListMessagesParams,
    ListPostRequest,
    ListRemindersParams,
    MessageGetResponse,
    MessagePostRequest,
    NotifyWhatsappParams,
    QueryEmbeddings200,
    QueryEmbeddingsById200,
    QueryEmbeddingsByIdParams,
    QueryEmbeddingsParams,
    ReminderGetResponse,
    ReminderPostRequest,
    SearchCitiesParams,
    UpdateUserParams,
    UploadFileBody,
    UploadFileParams,
    UpsertTriviaBankParams,
    UserGetResponse,
    UserPutRequest,
} from './model';
import { customInstance } from './custom_instance';

/**
 * Fetch weather data based on the provided latitude and longitude
 * @summary Fetch the weather
 */
export const getWeather = (params?: GetWeatherParams, signal?: AbortSignal) => {
    return customInstance<GetWeather200>({ url: `/weather`, method: 'GET', params, signal });
};

export const getGetWeatherQueryKey = (params?: GetWeatherParams) => {
    return [`/weather`, ...(params ? [params] : [])] as const;
};

export const getGetWeatherQueryOptions = <
    TData = Awaited<ReturnType<typeof getWeather>>,
    TError = unknown,
>(
    params?: GetWeatherParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getWeather>>, TError, TData>>;
    },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetWeatherQueryKey(params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWeather>>> = ({ signal }) =>
        getWeather(params, signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getWeather>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetWeatherQueryResult = NonNullable<Awaited<ReturnType<typeof getWeather>>>;
export type GetWeatherQueryError = unknown;

export function useGetWeather<TData = Awaited<ReturnType<typeof getWeather>>, TError = unknown>(
    params: undefined | GetWeatherParams,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getWeather>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<Awaited<ReturnType<typeof getWeather>>, TError, TData>,
                'initialData'
            >;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetWeather<TData = Awaited<ReturnType<typeof getWeather>>, TError = unknown>(
    params?: GetWeatherParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getWeather>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<Awaited<ReturnType<typeof getWeather>>, TError, TData>,
                'initialData'
            >;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetWeather<TData = Awaited<ReturnType<typeof getWeather>>, TError = unknown>(
    params?: GetWeatherParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getWeather>>, TError, TData>>;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Fetch the weather
 */

export function useGetWeather<TData = Awaited<ReturnType<typeof getWeather>>, TError = unknown>(
    params?: GetWeatherParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getWeather>>, TError, TData>>;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetWeatherQueryOptions(params, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * Gets the user by the provided user id
 * @summary Get the user
 */
export const getUser = (params?: GetUserParams, signal?: AbortSignal) => {
    return customInstance<UserGetResponse>({ url: `/user`, method: 'GET', params, signal });
};

export const getGetUserQueryKey = (params?: GetUserParams) => {
    return [`/user`, ...(params ? [params] : [])] as const;
};

export const getGetUserQueryOptions = <
    TData = Awaited<ReturnType<typeof getUser>>,
    TError = unknown,
>(
    params?: GetUserParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>>;
    },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetUserQueryKey(params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUser>>> = ({ signal }) =>
        getUser(params, signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getUser>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetUserQueryResult = NonNullable<Awaited<ReturnType<typeof getUser>>>;
export type GetUserQueryError = unknown;

export function useGetUser<TData = Awaited<ReturnType<typeof getUser>>, TError = unknown>(
    params: undefined | GetUserParams,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>,
                'initialData'
            >;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetUser<TData = Awaited<ReturnType<typeof getUser>>, TError = unknown>(
    params?: GetUserParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>,
                'initialData'
            >;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetUser<TData = Awaited<ReturnType<typeof getUser>>, TError = unknown>(
    params?: GetUserParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>>;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get the user
 */

export function useGetUser<TData = Awaited<ReturnType<typeof getUser>>, TError = unknown>(
    params?: GetUserParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>>;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetUserQueryOptions(params, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * Updates the user by the provided user id
 * @summary Update the user
 */
export const updateUser = (userPutRequest: UserPutRequest, params?: UpdateUserParams) => {
    return customInstance<UserGetResponse>({
        url: `/user`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: userPutRequest,
        params,
    });
};

export const getUpdateUserMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof updateUser>>,
        TError,
        { data: UserPutRequest; params?: UpdateUserParams },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof updateUser>>,
    TError,
    { data: UserPutRequest; params?: UpdateUserParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof updateUser>>,
        { data: UserPutRequest; params?: UpdateUserParams }
    > = (props) => {
        const { data, params } = props ?? {};

        return updateUser(data, params);
    };

    return { mutationFn, ...mutationOptions };
};

export type UpdateUserMutationResult = NonNullable<Awaited<ReturnType<typeof updateUser>>>;
export type UpdateUserMutationBody = UserPutRequest;
export type UpdateUserMutationError = unknown;

/**
 * @summary Update the user
 */
export const useUpdateUser = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof updateUser>>,
        TError,
        { data: UserPutRequest; params?: UpdateUserParams },
        TContext
    >;
}): UseMutationResult<
    Awaited<ReturnType<typeof updateUser>>,
    TError,
    { data: UserPutRequest; params?: UpdateUserParams },
    TContext
> => {
    const mutationOptions = getUpdateUserMutationOptions(options);

    return useMutation(mutationOptions);
};

/**
 * Deletes the user by the provided user id
 * @summary Delete the user
 */
export const deleteUser = (params?: DeleteUserParams) => {
    return customInstance<void>({ url: `/user`, method: 'DELETE', params });
};

export const getDeleteUserMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteUser>>,
        TError,
        { params?: DeleteUserParams },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof deleteUser>>,
    TError,
    { params?: DeleteUserParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof deleteUser>>,
        { params?: DeleteUserParams }
    > = (props) => {
        const { params } = props ?? {};

        return deleteUser(params);
    };

    return { mutationFn, ...mutationOptions };
};

export type DeleteUserMutationResult = NonNullable<Awaited<ReturnType<typeof deleteUser>>>;

export type DeleteUserMutationError = unknown;

/**
 * @summary Delete the user
 */
export const useDeleteUser = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteUser>>,
        TError,
        { params?: DeleteUserParams },
        TContext
    >;
}): UseMutationResult<
    Awaited<ReturnType<typeof deleteUser>>,
    TError,
    { params?: DeleteUserParams },
    TContext
> => {
    const mutationOptions = getDeleteUserMutationOptions(options);

    return useMutation(mutationOptions);
};

/**
 * Creates a new user reminder
 * @summary Create a new user reminder
 */
export const createReminder = (
    reminderPostRequest: ReminderPostRequest,
    params?: CreateReminderParams,
) => {
    return customInstance<ReminderGetResponse[]>({
        url: `/user/reminder`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: reminderPostRequest,
        params,
    });
};

export const getCreateReminderMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof createReminder>>,
        TError,
        { data: ReminderPostRequest; params?: CreateReminderParams },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof createReminder>>,
    TError,
    { data: ReminderPostRequest; params?: CreateReminderParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof createReminder>>,
        { data: ReminderPostRequest; params?: CreateReminderParams }
    > = (props) => {
        const { data, params } = props ?? {};

        return createReminder(data, params);
    };

    return { mutationFn, ...mutationOptions };
};

export type CreateReminderMutationResult = NonNullable<Awaited<ReturnType<typeof createReminder>>>;
export type CreateReminderMutationBody = ReminderPostRequest;
export type CreateReminderMutationError = unknown;

/**
 * @summary Create a new user reminder
 */
export const useCreateReminder = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof createReminder>>,
        TError,
        { data: ReminderPostRequest; params?: CreateReminderParams },
        TContext
    >;
}): UseMutationResult<
    Awaited<ReturnType<typeof createReminder>>,
    TError,
    { data: ReminderPostRequest; params?: CreateReminderParams },
    TContext
> => {
    const mutationOptions = getCreateReminderMutationOptions(options);

    return useMutation(mutationOptions);
};

/**
 * Lists reminders for a user
 * @summary List reminders for a user
 */
export const listReminders = (params?: ListRemindersParams, signal?: AbortSignal) => {
    return customInstance<ReminderGetResponse[]>({
        url: `/user/reminder`,
        method: 'GET',
        params,
        signal,
    });
};

export const getListRemindersQueryKey = (params?: ListRemindersParams) => {
    return [`/user/reminder`, ...(params ? [params] : [])] as const;
};

export const getListRemindersQueryOptions = <
    TData = Awaited<ReturnType<typeof listReminders>>,
    TError = unknown,
>(
    params?: ListRemindersParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listReminders>>, TError, TData>>;
    },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getListRemindersQueryKey(params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listReminders>>> = ({ signal }) =>
        listReminders(params, signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof listReminders>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type ListRemindersQueryResult = NonNullable<Awaited<ReturnType<typeof listReminders>>>;
export type ListRemindersQueryError = unknown;

export function useListReminders<
    TData = Awaited<ReturnType<typeof listReminders>>,
    TError = unknown,
>(
    params: undefined | ListRemindersParams,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof listReminders>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<Awaited<ReturnType<typeof listReminders>>, TError, TData>,
                'initialData'
            >;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useListReminders<
    TData = Awaited<ReturnType<typeof listReminders>>,
    TError = unknown,
>(
    params?: ListRemindersParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listReminders>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof listReminders>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useListReminders<
    TData = Awaited<ReturnType<typeof listReminders>>,
    TError = unknown,
>(
    params?: ListRemindersParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listReminders>>, TError, TData>>;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary List reminders for a user
 */

export function useListReminders<
    TData = Awaited<ReturnType<typeof listReminders>>,
    TError = unknown,
>(
    params?: ListRemindersParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listReminders>>, TError, TData>>;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getListRemindersQueryOptions(params, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * Creates a new user list
 * @summary Create a new user list
 */
export const createList = (listPostRequest: ListPostRequest, params?: CreateListParams) => {
    return customInstance<ListGetResponse[]>({
        url: `/user/list`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: listPostRequest,
        params,
    });
};

export const getCreateListMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof createList>>,
        TError,
        { data: ListPostRequest; params?: CreateListParams },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof createList>>,
    TError,
    { data: ListPostRequest; params?: CreateListParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof createList>>,
        { data: ListPostRequest; params?: CreateListParams }
    > = (props) => {
        const { data, params } = props ?? {};

        return createList(data, params);
    };

    return { mutationFn, ...mutationOptions };
};

export type CreateListMutationResult = NonNullable<Awaited<ReturnType<typeof createList>>>;
export type CreateListMutationBody = ListPostRequest;
export type CreateListMutationError = unknown;

/**
 * @summary Create a new user list
 */
export const useCreateList = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof createList>>,
        TError,
        { data: ListPostRequest; params?: CreateListParams },
        TContext
    >;
}): UseMutationResult<
    Awaited<ReturnType<typeof createList>>,
    TError,
    { data: ListPostRequest; params?: CreateListParams },
    TContext
> => {
    const mutationOptions = getCreateListMutationOptions(options);

    return useMutation(mutationOptions);
};

/**
 * Lists reminders for a user
 * @summary List reminders for a user
 */
export const listLists = (params?: ListListsParams, signal?: AbortSignal) => {
    return customInstance<ListGetResponse[]>({ url: `/user/list`, method: 'GET', params, signal });
};

export const getListListsQueryKey = (params?: ListListsParams) => {
    return [`/user/list`, ...(params ? [params] : [])] as const;
};

export const getListListsQueryOptions = <
    TData = Awaited<ReturnType<typeof listLists>>,
    TError = unknown,
>(
    params?: ListListsParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listLists>>, TError, TData>>;
    },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getListListsQueryKey(params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listLists>>> = ({ signal }) =>
        listLists(params, signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof listLists>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type ListListsQueryResult = NonNullable<Awaited<ReturnType<typeof listLists>>>;
export type ListListsQueryError = unknown;

export function useListLists<TData = Awaited<ReturnType<typeof listLists>>, TError = unknown>(
    params: undefined | ListListsParams,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof listLists>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<Awaited<ReturnType<typeof listLists>>, TError, TData>,
                'initialData'
            >;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useListLists<TData = Awaited<ReturnType<typeof listLists>>, TError = unknown>(
    params?: ListListsParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listLists>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<Awaited<ReturnType<typeof listLists>>, TError, TData>,
                'initialData'
            >;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useListLists<TData = Awaited<ReturnType<typeof listLists>>, TError = unknown>(
    params?: ListListsParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listLists>>, TError, TData>>;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary List reminders for a user
 */

export function useListLists<TData = Awaited<ReturnType<typeof listLists>>, TError = unknown>(
    params?: ListListsParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listLists>>, TError, TData>>;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getListListsQueryOptions(params, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * Updates the user's trivia bank
 * @summary Updates the user's trivia bank
 */
export const upsertTriviaBank = (
    upsertTriviaBankBody: unknown,
    params?: UpsertTriviaBankParams,
) => {
    return customInstance<UserGetResponse>({
        url: `/user/trivia_bank`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: upsertTriviaBankBody,
        params,
    });
};

export const getUpsertTriviaBankMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof upsertTriviaBank>>,
        TError,
        { data: unknown; params?: UpsertTriviaBankParams },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof upsertTriviaBank>>,
    TError,
    { data: unknown; params?: UpsertTriviaBankParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof upsertTriviaBank>>,
        { data: unknown; params?: UpsertTriviaBankParams }
    > = (props) => {
        const { data, params } = props ?? {};

        return upsertTriviaBank(data, params);
    };

    return { mutationFn, ...mutationOptions };
};

export type UpsertTriviaBankMutationResult = NonNullable<
    Awaited<ReturnType<typeof upsertTriviaBank>>
>;
export type UpsertTriviaBankMutationBody = unknown;
export type UpsertTriviaBankMutationError = unknown;

/**
 * @summary Updates the user's trivia bank
 */
export const useUpsertTriviaBank = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof upsertTriviaBank>>,
        TError,
        { data: unknown; params?: UpsertTriviaBankParams },
        TContext
    >;
}): UseMutationResult<
    Awaited<ReturnType<typeof upsertTriviaBank>>,
    TError,
    { data: unknown; params?: UpsertTriviaBankParams },
    TContext
> => {
    const mutationOptions = getUpsertTriviaBankMutationOptions(options);

    return useMutation(mutationOptions);
};

/**
 * Gets the user's trivia bank
 * @summary Get the user's trivia bank
 */
export const getTriviaBank = (params?: GetTriviaBankParams, signal?: AbortSignal) => {
    return customInstance<unknown>({ url: `/user/trivia_bank`, method: 'GET', params, signal });
};

export const getGetTriviaBankQueryKey = (params?: GetTriviaBankParams) => {
    return [`/user/trivia_bank`, ...(params ? [params] : [])] as const;
};

export const getGetTriviaBankQueryOptions = <
    TData = Awaited<ReturnType<typeof getTriviaBank>>,
    TError = unknown,
>(
    params?: GetTriviaBankParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTriviaBank>>, TError, TData>>;
    },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetTriviaBankQueryKey(params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTriviaBank>>> = ({ signal }) =>
        getTriviaBank(params, signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getTriviaBank>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetTriviaBankQueryResult = NonNullable<Awaited<ReturnType<typeof getTriviaBank>>>;
export type GetTriviaBankQueryError = unknown;

export function useGetTriviaBank<
    TData = Awaited<ReturnType<typeof getTriviaBank>>,
    TError = unknown,
>(
    params: undefined | GetTriviaBankParams,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTriviaBank>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<Awaited<ReturnType<typeof getTriviaBank>>, TError, TData>,
                'initialData'
            >;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetTriviaBank<
    TData = Awaited<ReturnType<typeof getTriviaBank>>,
    TError = unknown,
>(
    params?: GetTriviaBankParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTriviaBank>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getTriviaBank>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetTriviaBank<
    TData = Awaited<ReturnType<typeof getTriviaBank>>,
    TError = unknown,
>(
    params?: GetTriviaBankParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTriviaBank>>, TError, TData>>;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get the user's trivia bank
 */

export function useGetTriviaBank<
    TData = Awaited<ReturnType<typeof getTriviaBank>>,
    TError = unknown,
>(
    params?: GetTriviaBankParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTriviaBank>>, TError, TData>>;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetTriviaBankQueryOptions(params, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * Creates a new user message
 * @summary Create a new user message
 */
export const createMessage = (
    messagePostRequest: MessagePostRequest,
    params?: CreateMessageParams,
) => {
    return customInstance<MessageGetResponse[]>({
        url: `/user/message`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: messagePostRequest,
        params,
    });
};

export const getCreateMessageMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof createMessage>>,
        TError,
        { data: MessagePostRequest; params?: CreateMessageParams },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof createMessage>>,
    TError,
    { data: MessagePostRequest; params?: CreateMessageParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof createMessage>>,
        { data: MessagePostRequest; params?: CreateMessageParams }
    > = (props) => {
        const { data, params } = props ?? {};

        return createMessage(data, params);
    };

    return { mutationFn, ...mutationOptions };
};

export type CreateMessageMutationResult = NonNullable<Awaited<ReturnType<typeof createMessage>>>;
export type CreateMessageMutationBody = MessagePostRequest;
export type CreateMessageMutationError = unknown;

/**
 * @summary Create a new user message
 */
export const useCreateMessage = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof createMessage>>,
        TError,
        { data: MessagePostRequest; params?: CreateMessageParams },
        TContext
    >;
}): UseMutationResult<
    Awaited<ReturnType<typeof createMessage>>,
    TError,
    { data: MessagePostRequest; params?: CreateMessageParams },
    TContext
> => {
    const mutationOptions = getCreateMessageMutationOptions(options);

    return useMutation(mutationOptions);
};

/**
 * Lists messages for a user
 * @summary List messages for a user
 */
export const listMessages = (params?: ListMessagesParams, signal?: AbortSignal) => {
    return customInstance<MessageGetResponse[]>({
        url: `/user/message`,
        method: 'GET',
        params,
        signal,
    });
};

export const getListMessagesQueryKey = (params?: ListMessagesParams) => {
    return [`/user/message`, ...(params ? [params] : [])] as const;
};

export const getListMessagesQueryOptions = <
    TData = Awaited<ReturnType<typeof listMessages>>,
    TError = unknown,
>(
    params?: ListMessagesParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listMessages>>, TError, TData>>;
    },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getListMessagesQueryKey(params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listMessages>>> = ({ signal }) =>
        listMessages(params, signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof listMessages>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type ListMessagesQueryResult = NonNullable<Awaited<ReturnType<typeof listMessages>>>;
export type ListMessagesQueryError = unknown;

export function useListMessages<TData = Awaited<ReturnType<typeof listMessages>>, TError = unknown>(
    params: undefined | ListMessagesParams,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof listMessages>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<Awaited<ReturnType<typeof listMessages>>, TError, TData>,
                'initialData'
            >;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useListMessages<TData = Awaited<ReturnType<typeof listMessages>>, TError = unknown>(
    params?: ListMessagesParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listMessages>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof listMessages>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useListMessages<TData = Awaited<ReturnType<typeof listMessages>>, TError = unknown>(
    params?: ListMessagesParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listMessages>>, TError, TData>>;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary List messages for a user
 */

export function useListMessages<TData = Awaited<ReturnType<typeof listMessages>>, TError = unknown>(
    params?: ListMessagesParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listMessages>>, TError, TData>>;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getListMessagesQueryOptions(params, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * Delete messages for a user
 * @summary Delete messages for a user
 */
export const deleteMessages = (params?: DeleteMessagesParams) => {
    return customInstance<void>({ url: `/user/message`, method: 'DELETE', params });
};

export const getDeleteMessagesMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteMessages>>,
        TError,
        { params?: DeleteMessagesParams },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof deleteMessages>>,
    TError,
    { params?: DeleteMessagesParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof deleteMessages>>,
        { params?: DeleteMessagesParams }
    > = (props) => {
        const { params } = props ?? {};

        return deleteMessages(params);
    };

    return { mutationFn, ...mutationOptions };
};

export type DeleteMessagesMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMessages>>>;

export type DeleteMessagesMutationError = unknown;

/**
 * @summary Delete messages for a user
 */
export const useDeleteMessages = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteMessages>>,
        TError,
        { params?: DeleteMessagesParams },
        TContext
    >;
}): UseMutationResult<
    Awaited<ReturnType<typeof deleteMessages>>,
    TError,
    { params?: DeleteMessagesParams },
    TContext
> => {
    const mutationOptions = getDeleteMessagesMutationOptions(options);

    return useMutation(mutationOptions);
};

/**
 * Creates a notification for a user
 * @summary Creates a user notification
 */
export const notifyWhatsapp = (notifyWhatsappBody: unknown, params?: NotifyWhatsappParams) => {
    return customInstance<void>({
        url: `/user/notify_whatsapp`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: notifyWhatsappBody,
        params,
    });
};

export const getNotifyWhatsappMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof notifyWhatsapp>>,
        TError,
        { data: unknown; params?: NotifyWhatsappParams },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof notifyWhatsapp>>,
    TError,
    { data: unknown; params?: NotifyWhatsappParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof notifyWhatsapp>>,
        { data: unknown; params?: NotifyWhatsappParams }
    > = (props) => {
        const { data, params } = props ?? {};

        return notifyWhatsapp(data, params);
    };

    return { mutationFn, ...mutationOptions };
};

export type NotifyWhatsappMutationResult = NonNullable<Awaited<ReturnType<typeof notifyWhatsapp>>>;
export type NotifyWhatsappMutationBody = unknown;
export type NotifyWhatsappMutationError = unknown;

/**
 * @summary Creates a user notification
 */
export const useNotifyWhatsapp = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof notifyWhatsapp>>,
        TError,
        { data: unknown; params?: NotifyWhatsappParams },
        TContext
    >;
}): UseMutationResult<
    Awaited<ReturnType<typeof notifyWhatsapp>>,
    TError,
    { data: unknown; params?: NotifyWhatsappParams },
    TContext
> => {
    const mutationOptions = getNotifyWhatsappMutationOptions(options);

    return useMutation(mutationOptions);
};

/**
 * Fetch flight offers
 * @summary Fetch flight offers
 */
export const getFlightOffers = (params: GetFlightOffersParams, signal?: AbortSignal) => {
    return customInstance<BookingDotComFlightResponse>({
        url: `/travel/flights/offers`,
        method: 'GET',
        params,
        signal,
    });
};

export const getGetFlightOffersQueryKey = (params: GetFlightOffersParams) => {
    return [`/travel/flights/offers`, ...(params ? [params] : [])] as const;
};

export const getGetFlightOffersQueryOptions = <
    TData = Awaited<ReturnType<typeof getFlightOffers>>,
    TError = unknown,
>(
    params: GetFlightOffersParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getFlightOffers>>, TError, TData>
        >;
    },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetFlightOffersQueryKey(params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFlightOffers>>> = ({ signal }) =>
        getFlightOffers(params, signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getFlightOffers>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetFlightOffersQueryResult = NonNullable<Awaited<ReturnType<typeof getFlightOffers>>>;
export type GetFlightOffersQueryError = unknown;

export function useGetFlightOffers<
    TData = Awaited<ReturnType<typeof getFlightOffers>>,
    TError = unknown,
>(
    params: GetFlightOffersParams,
    options: {
        query: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getFlightOffers>>, TError, TData>
        > &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getFlightOffers>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetFlightOffers<
    TData = Awaited<ReturnType<typeof getFlightOffers>>,
    TError = unknown,
>(
    params: GetFlightOffersParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getFlightOffers>>, TError, TData>
        > &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getFlightOffers>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetFlightOffers<
    TData = Awaited<ReturnType<typeof getFlightOffers>>,
    TError = unknown,
>(
    params: GetFlightOffersParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getFlightOffers>>, TError, TData>
        >;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Fetch flight offers
 */

export function useGetFlightOffers<
    TData = Awaited<ReturnType<typeof getFlightOffers>>,
    TError = unknown,
>(
    params: GetFlightOffersParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getFlightOffers>>, TError, TData>
        >;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetFlightOffersQueryOptions(params, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * Fetch flight booking url
 * @summary Fetch flight booking url
 */
export const getFlightBookingUrl = (params: GetFlightBookingUrlParams, signal?: AbortSignal) => {
    return customInstance<BookingDotComFlightBookingUrlResponse>({
        url: `/travel/flights/booking_url`,
        method: 'GET',
        params,
        signal,
    });
};

export const getGetFlightBookingUrlQueryKey = (params: GetFlightBookingUrlParams) => {
    return [`/travel/flights/booking_url`, ...(params ? [params] : [])] as const;
};

export const getGetFlightBookingUrlQueryOptions = <
    TData = Awaited<ReturnType<typeof getFlightBookingUrl>>,
    TError = unknown,
>(
    params: GetFlightBookingUrlParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getFlightBookingUrl>>, TError, TData>
        >;
    },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetFlightBookingUrlQueryKey(params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFlightBookingUrl>>> = ({ signal }) =>
        getFlightBookingUrl(params, signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getFlightBookingUrl>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetFlightBookingUrlQueryResult = NonNullable<
    Awaited<ReturnType<typeof getFlightBookingUrl>>
>;
export type GetFlightBookingUrlQueryError = unknown;

export function useGetFlightBookingUrl<
    TData = Awaited<ReturnType<typeof getFlightBookingUrl>>,
    TError = unknown,
>(
    params: GetFlightBookingUrlParams,
    options: {
        query: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getFlightBookingUrl>>, TError, TData>
        > &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getFlightBookingUrl>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetFlightBookingUrl<
    TData = Awaited<ReturnType<typeof getFlightBookingUrl>>,
    TError = unknown,
>(
    params: GetFlightBookingUrlParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getFlightBookingUrl>>, TError, TData>
        > &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getFlightBookingUrl>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetFlightBookingUrl<
    TData = Awaited<ReturnType<typeof getFlightBookingUrl>>,
    TError = unknown,
>(
    params: GetFlightBookingUrlParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getFlightBookingUrl>>, TError, TData>
        >;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Fetch flight booking url
 */

export function useGetFlightBookingUrl<
    TData = Awaited<ReturnType<typeof getFlightBookingUrl>>,
    TError = unknown,
>(
    params: GetFlightBookingUrlParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getFlightBookingUrl>>, TError, TData>
        >;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetFlightBookingUrlQueryOptions(params, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * Search for airports or cities
 * @summary Search for airports or cities
 */
export const searchCities = (params: SearchCitiesParams, signal?: AbortSignal) => {
    return customInstance<BookingDotComCitiesOrAirportsResponse[]>({
        url: `/travel/cities`,
        method: 'GET',
        params,
        signal,
    });
};

export const getSearchCitiesQueryKey = (params: SearchCitiesParams) => {
    return [`/travel/cities`, ...(params ? [params] : [])] as const;
};

export const getSearchCitiesQueryOptions = <
    TData = Awaited<ReturnType<typeof searchCities>>,
    TError = unknown,
>(
    params: SearchCitiesParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof searchCities>>, TError, TData>>;
    },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getSearchCitiesQueryKey(params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchCities>>> = ({ signal }) =>
        searchCities(params, signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof searchCities>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type SearchCitiesQueryResult = NonNullable<Awaited<ReturnType<typeof searchCities>>>;
export type SearchCitiesQueryError = unknown;

export function useSearchCities<TData = Awaited<ReturnType<typeof searchCities>>, TError = unknown>(
    params: SearchCitiesParams,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof searchCities>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<Awaited<ReturnType<typeof searchCities>>, TError, TData>,
                'initialData'
            >;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useSearchCities<TData = Awaited<ReturnType<typeof searchCities>>, TError = unknown>(
    params: SearchCitiesParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof searchCities>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof searchCities>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useSearchCities<TData = Awaited<ReturnType<typeof searchCities>>, TError = unknown>(
    params: SearchCitiesParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof searchCities>>, TError, TData>>;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Search for airports or cities
 */

export function useSearchCities<TData = Awaited<ReturnType<typeof searchCities>>, TError = unknown>(
    params: SearchCitiesParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof searchCities>>, TError, TData>>;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getSearchCitiesQueryOptions(params, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * Creates a new test user with number starting with 999
 * @summary Creates a new test user
 */
export const getNewTestUser = (signal?: AbortSignal) => {
    return customInstance<UserGetResponse>({ url: `/test/user`, method: 'GET', signal });
};

export const getGetNewTestUserQueryKey = () => {
    return [`/test/user`] as const;
};

export const getGetNewTestUserQueryOptions = <
    TData = Awaited<ReturnType<typeof getNewTestUser>>,
    TError = unknown,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getNewTestUser>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetNewTestUserQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNewTestUser>>> = ({ signal }) =>
        getNewTestUser(signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getNewTestUser>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetNewTestUserQueryResult = NonNullable<Awaited<ReturnType<typeof getNewTestUser>>>;
export type GetNewTestUserQueryError = unknown;

export function useGetNewTestUser<
    TData = Awaited<ReturnType<typeof getNewTestUser>>,
    TError = unknown,
>(options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getNewTestUser>>, TError, TData>> &
        Pick<
            DefinedInitialDataOptions<Awaited<ReturnType<typeof getNewTestUser>>, TError, TData>,
            'initialData'
        >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetNewTestUser<
    TData = Awaited<ReturnType<typeof getNewTestUser>>,
    TError = unknown,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getNewTestUser>>, TError, TData>> &
        Pick<
            UndefinedInitialDataOptions<Awaited<ReturnType<typeof getNewTestUser>>, TError, TData>,
            'initialData'
        >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetNewTestUser<
    TData = Awaited<ReturnType<typeof getNewTestUser>>,
    TError = unknown,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getNewTestUser>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Creates a new test user
 */

export function useGetNewTestUser<
    TData = Awaited<ReturnType<typeof getNewTestUser>>,
    TError = unknown,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getNewTestUser>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetNewTestUserQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * Gets a reminder by the provided reminder id
 * @summary Get a reminder
 */
export const getReminder = (id: string, signal?: AbortSignal) => {
    return customInstance<ReminderGetResponse>({ url: `/reminder/${id}`, method: 'GET', signal });
};

export const getGetReminderQueryKey = (id: string) => {
    return [`/reminder/${id}`] as const;
};

export const getGetReminderQueryOptions = <
    TData = Awaited<ReturnType<typeof getReminder>>,
    TError = unknown,
>(
    id: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getReminder>>, TError, TData>>;
    },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetReminderQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getReminder>>> = ({ signal }) =>
        getReminder(id, signal);

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getReminder>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetReminderQueryResult = NonNullable<Awaited<ReturnType<typeof getReminder>>>;
export type GetReminderQueryError = unknown;

export function useGetReminder<TData = Awaited<ReturnType<typeof getReminder>>, TError = unknown>(
    id: string,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getReminder>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<Awaited<ReturnType<typeof getReminder>>, TError, TData>,
                'initialData'
            >;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetReminder<TData = Awaited<ReturnType<typeof getReminder>>, TError = unknown>(
    id: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getReminder>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<Awaited<ReturnType<typeof getReminder>>, TError, TData>,
                'initialData'
            >;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetReminder<TData = Awaited<ReturnType<typeof getReminder>>, TError = unknown>(
    id: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getReminder>>, TError, TData>>;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get a reminder
 */

export function useGetReminder<TData = Awaited<ReturnType<typeof getReminder>>, TError = unknown>(
    id: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getReminder>>, TError, TData>>;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetReminderQueryOptions(id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * Deletes a reminder by the provided reminder id
 * @summary Delete a reminder
 */
export const deleteReminder = (id: string) => {
    return customInstance<void>({ url: `/reminder/${id}`, method: 'DELETE' });
};

export const getDeleteReminderMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteReminder>>,
        TError,
        { id: string },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof deleteReminder>>,
    TError,
    { id: string },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof deleteReminder>>,
        { id: string }
    > = (props) => {
        const { id } = props ?? {};

        return deleteReminder(id);
    };

    return { mutationFn, ...mutationOptions };
};

export type DeleteReminderMutationResult = NonNullable<Awaited<ReturnType<typeof deleteReminder>>>;

export type DeleteReminderMutationError = unknown;

/**
 * @summary Delete a reminder
 */
export const useDeleteReminder = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteReminder>>,
        TError,
        { id: string },
        TContext
    >;
}): UseMutationResult<
    Awaited<ReturnType<typeof deleteReminder>>,
    TError,
    { id: string },
    TContext
> => {
    const mutationOptions = getDeleteReminderMutationOptions(options);

    return useMutation(mutationOptions);
};

/**
 * Updates a reminder by the provided reminder id
 * @summary Update a reminder
 */
export const updateReminder = (id: string, reminderPostRequest: ReminderPostRequest) => {
    return customInstance<ReminderGetResponse>({
        url: `/reminder/${id}`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: reminderPostRequest,
    });
};

export const getUpdateReminderMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof updateReminder>>,
        TError,
        { id: string; data: ReminderPostRequest },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof updateReminder>>,
    TError,
    { id: string; data: ReminderPostRequest },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof updateReminder>>,
        { id: string; data: ReminderPostRequest }
    > = (props) => {
        const { id, data } = props ?? {};

        return updateReminder(id, data);
    };

    return { mutationFn, ...mutationOptions };
};

export type UpdateReminderMutationResult = NonNullable<Awaited<ReturnType<typeof updateReminder>>>;
export type UpdateReminderMutationBody = ReminderPostRequest;
export type UpdateReminderMutationError = unknown;

/**
 * @summary Update a reminder
 */
export const useUpdateReminder = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof updateReminder>>,
        TError,
        { id: string; data: ReminderPostRequest },
        TContext
    >;
}): UseMutationResult<
    Awaited<ReturnType<typeof updateReminder>>,
    TError,
    { id: string; data: ReminderPostRequest },
    TContext
> => {
    const mutationOptions = getUpdateReminderMutationOptions(options);

    return useMutation(mutationOptions);
};

/**
 * Gets a list by the provided list id
 * @summary Get a list
 */
export const getList = (id: string, signal?: AbortSignal) => {
    return customInstance<ListGetResponse>({ url: `/list/${id}`, method: 'GET', signal });
};

export const getGetListQueryKey = (id: string) => {
    return [`/list/${id}`] as const;
};

export const getGetListQueryOptions = <
    TData = Awaited<ReturnType<typeof getList>>,
    TError = unknown,
>(
    id: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getList>>, TError, TData>>;
    },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetListQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getList>>> = ({ signal }) =>
        getList(id, signal);

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getList>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetListQueryResult = NonNullable<Awaited<ReturnType<typeof getList>>>;
export type GetListQueryError = unknown;

export function useGetList<TData = Awaited<ReturnType<typeof getList>>, TError = unknown>(
    id: string,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getList>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<Awaited<ReturnType<typeof getList>>, TError, TData>,
                'initialData'
            >;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetList<TData = Awaited<ReturnType<typeof getList>>, TError = unknown>(
    id: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getList>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<Awaited<ReturnType<typeof getList>>, TError, TData>,
                'initialData'
            >;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetList<TData = Awaited<ReturnType<typeof getList>>, TError = unknown>(
    id: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getList>>, TError, TData>>;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get a list
 */

export function useGetList<TData = Awaited<ReturnType<typeof getList>>, TError = unknown>(
    id: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getList>>, TError, TData>>;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetListQueryOptions(id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * Deletes a list by the provided list id
 * @summary Delete a list
 */
export const deleteList = (id: string) => {
    return customInstance<void>({ url: `/list/${id}`, method: 'DELETE' });
};

export const getDeleteListMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteList>>,
        TError,
        { id: string },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof deleteList>>,
    TError,
    { id: string },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteList>>, { id: string }> = (
        props,
    ) => {
        const { id } = props ?? {};

        return deleteList(id);
    };

    return { mutationFn, ...mutationOptions };
};

export type DeleteListMutationResult = NonNullable<Awaited<ReturnType<typeof deleteList>>>;

export type DeleteListMutationError = unknown;

/**
 * @summary Delete a list
 */
export const useDeleteList = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteList>>,
        TError,
        { id: string },
        TContext
    >;
}): UseMutationResult<Awaited<ReturnType<typeof deleteList>>, TError, { id: string }, TContext> => {
    const mutationOptions = getDeleteListMutationOptions(options);

    return useMutation(mutationOptions);
};

/**
 * Updates a list by the provided list id
 * @summary Update a list
 */
export const updateList = (id: string, listPostRequest: ListPostRequest) => {
    return customInstance<ListGetResponse>({
        url: `/list/${id}`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: listPostRequest,
    });
};

export const getUpdateListMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof updateList>>,
        TError,
        { id: string; data: ListPostRequest },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof updateList>>,
    TError,
    { id: string; data: ListPostRequest },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof updateList>>,
        { id: string; data: ListPostRequest }
    > = (props) => {
        const { id, data } = props ?? {};

        return updateList(id, data);
    };

    return { mutationFn, ...mutationOptions };
};

export type UpdateListMutationResult = NonNullable<Awaited<ReturnType<typeof updateList>>>;
export type UpdateListMutationBody = ListPostRequest;
export type UpdateListMutationError = unknown;

/**
 * @summary Update a list
 */
export const useUpdateList = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof updateList>>,
        TError,
        { id: string; data: ListPostRequest },
        TContext
    >;
}): UseMutationResult<
    Awaited<ReturnType<typeof updateList>>,
    TError,
    { id: string; data: ListPostRequest },
    TContext
> => {
    const mutationOptions = getUpdateListMutationOptions(options);

    return useMutation(mutationOptions);
};

/**
 * Fetch google authorization url
 * @summary Fetch the google authorization url
 */
export const getAuthorizationUrl = (userId: string, signal?: AbortSignal) => {
    return customInstance<string>({ url: `/google/auth/user/${userId}`, method: 'GET', signal });
};

export const getGetAuthorizationUrlQueryKey = (userId: string) => {
    return [`/google/auth/user/${userId}`] as const;
};

export const getGetAuthorizationUrlQueryOptions = <
    TData = Awaited<ReturnType<typeof getAuthorizationUrl>>,
    TError = unknown,
>(
    userId: string,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getAuthorizationUrl>>, TError, TData>
        >;
    },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetAuthorizationUrlQueryKey(userId);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuthorizationUrl>>> = ({ signal }) =>
        getAuthorizationUrl(userId, signal);

    return { queryKey, queryFn, enabled: !!userId, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getAuthorizationUrl>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetAuthorizationUrlQueryResult = NonNullable<
    Awaited<ReturnType<typeof getAuthorizationUrl>>
>;
export type GetAuthorizationUrlQueryError = unknown;

export function useGetAuthorizationUrl<
    TData = Awaited<ReturnType<typeof getAuthorizationUrl>>,
    TError = unknown,
>(
    userId: string,
    options: {
        query: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getAuthorizationUrl>>, TError, TData>
        > &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getAuthorizationUrl>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAuthorizationUrl<
    TData = Awaited<ReturnType<typeof getAuthorizationUrl>>,
    TError = unknown,
>(
    userId: string,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getAuthorizationUrl>>, TError, TData>
        > &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getAuthorizationUrl>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAuthorizationUrl<
    TData = Awaited<ReturnType<typeof getAuthorizationUrl>>,
    TError = unknown,
>(
    userId: string,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getAuthorizationUrl>>, TError, TData>
        >;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Fetch the google authorization url
 */

export function useGetAuthorizationUrl<
    TData = Awaited<ReturnType<typeof getAuthorizationUrl>>,
    TError = unknown,
>(
    userId: string,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof getAuthorizationUrl>>, TError, TData>
        >;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetAuthorizationUrlQueryOptions(userId, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * The callback url for google auth
 * @summary The callback url for google auth
 */
export const authCallback = (params: AuthCallbackParams, signal?: AbortSignal) => {
    return customInstance<unknown>({ url: `/google/auth_callback`, method: 'GET', params, signal });
};

export const getAuthCallbackQueryKey = (params: AuthCallbackParams) => {
    return [`/google/auth_callback`, ...(params ? [params] : [])] as const;
};

export const getAuthCallbackQueryOptions = <
    TData = Awaited<ReturnType<typeof authCallback>>,
    TError = unknown,
>(
    params: AuthCallbackParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof authCallback>>, TError, TData>>;
    },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getAuthCallbackQueryKey(params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof authCallback>>> = ({ signal }) =>
        authCallback(params, signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof authCallback>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type AuthCallbackQueryResult = NonNullable<Awaited<ReturnType<typeof authCallback>>>;
export type AuthCallbackQueryError = unknown;

export function useAuthCallback<TData = Awaited<ReturnType<typeof authCallback>>, TError = unknown>(
    params: AuthCallbackParams,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof authCallback>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<Awaited<ReturnType<typeof authCallback>>, TError, TData>,
                'initialData'
            >;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useAuthCallback<TData = Awaited<ReturnType<typeof authCallback>>, TError = unknown>(
    params: AuthCallbackParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof authCallback>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof authCallback>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useAuthCallback<TData = Awaited<ReturnType<typeof authCallback>>, TError = unknown>(
    params: AuthCallbackParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof authCallback>>, TError, TData>>;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary The callback url for google auth
 */

export function useAuthCallback<TData = Awaited<ReturnType<typeof authCallback>>, TError = unknown>(
    params: AuthCallbackParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof authCallback>>, TError, TData>>;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getAuthCallbackQueryOptions(params, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * Upload a file to the embedding service
 * @summary Upload a file
 */
export const uploadFile = (uploadFileBody: UploadFileBody, params?: UploadFileParams) => {
    const formData = new FormData();
    formData.append('file', uploadFileBody.file);

    return customInstance<string>({
        url: `/embedding/upload`,
        method: 'POST',
        headers: { 'Content-Type': 'multipart/form-data' },
        data: formData,
        params,
    });
};

export const getUploadFileMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof uploadFile>>,
        TError,
        { data: UploadFileBody; params?: UploadFileParams },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof uploadFile>>,
    TError,
    { data: UploadFileBody; params?: UploadFileParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof uploadFile>>,
        { data: UploadFileBody; params?: UploadFileParams }
    > = (props) => {
        const { data, params } = props ?? {};

        return uploadFile(data, params);
    };

    return { mutationFn, ...mutationOptions };
};

export type UploadFileMutationResult = NonNullable<Awaited<ReturnType<typeof uploadFile>>>;
export type UploadFileMutationBody = UploadFileBody;
export type UploadFileMutationError = unknown;

/**
 * @summary Upload a file
 */
export const useUploadFile = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof uploadFile>>,
        TError,
        { data: UploadFileBody; params?: UploadFileParams },
        TContext
    >;
}): UseMutationResult<
    Awaited<ReturnType<typeof uploadFile>>,
    TError,
    { data: UploadFileBody; params?: UploadFileParams },
    TContext
> => {
    const mutationOptions = getUploadFileMutationOptions(options);

    return useMutation(mutationOptions);
};

/**
 * Download a file from the embedding service
 * @summary Download a file
 */
export const downloadFile = (id: string, signal?: AbortSignal) => {
    return customInstance<void>({ url: `/embedding/download/${id}`, method: 'GET', signal });
};

export const getDownloadFileQueryKey = (id: string) => {
    return [`/embedding/download/${id}`] as const;
};

export const getDownloadFileQueryOptions = <
    TData = Awaited<ReturnType<typeof downloadFile>>,
    TError = unknown,
>(
    id: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadFile>>, TError, TData>>;
    },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getDownloadFileQueryKey(id);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof downloadFile>>> = ({ signal }) =>
        downloadFile(id, signal);

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof downloadFile>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type DownloadFileQueryResult = NonNullable<Awaited<ReturnType<typeof downloadFile>>>;
export type DownloadFileQueryError = unknown;

export function useDownloadFile<TData = Awaited<ReturnType<typeof downloadFile>>, TError = unknown>(
    id: string,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadFile>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<Awaited<ReturnType<typeof downloadFile>>, TError, TData>,
                'initialData'
            >;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useDownloadFile<TData = Awaited<ReturnType<typeof downloadFile>>, TError = unknown>(
    id: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadFile>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof downloadFile>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useDownloadFile<TData = Awaited<ReturnType<typeof downloadFile>>, TError = unknown>(
    id: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadFile>>, TError, TData>>;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Download a file
 */

export function useDownloadFile<TData = Awaited<ReturnType<typeof downloadFile>>, TError = unknown>(
    id: string,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof downloadFile>>, TError, TData>>;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getDownloadFileQueryOptions(id, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * List all files in the embedding service
 * @summary List all files
 */
export const listFiles = (signal?: AbortSignal) => {
    return customInstance<EmbeddingFileListResponse[]>({
        url: `/embedding`,
        method: 'GET',
        signal,
    });
};

export const getListFilesQueryKey = () => {
    return [`/embedding`] as const;
};

export const getListFilesQueryOptions = <
    TData = Awaited<ReturnType<typeof listFiles>>,
    TError = unknown,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listFiles>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getListFilesQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listFiles>>> = ({ signal }) =>
        listFiles(signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof listFiles>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type ListFilesQueryResult = NonNullable<Awaited<ReturnType<typeof listFiles>>>;
export type ListFilesQueryError = unknown;

export function useListFiles<
    TData = Awaited<ReturnType<typeof listFiles>>,
    TError = unknown,
>(options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof listFiles>>, TError, TData>> &
        Pick<
            DefinedInitialDataOptions<Awaited<ReturnType<typeof listFiles>>, TError, TData>,
            'initialData'
        >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useListFiles<
    TData = Awaited<ReturnType<typeof listFiles>>,
    TError = unknown,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listFiles>>, TError, TData>> &
        Pick<
            UndefinedInitialDataOptions<Awaited<ReturnType<typeof listFiles>>, TError, TData>,
            'initialData'
        >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useListFiles<
    TData = Awaited<ReturnType<typeof listFiles>>,
    TError = unknown,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listFiles>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary List all files
 */

export function useListFiles<
    TData = Awaited<ReturnType<typeof listFiles>>,
    TError = unknown,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof listFiles>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getListFilesQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * Delete all files from the embedding service
 * @summary Delete all files
 */
export const deleteAllFiles = () => {
    return customInstance<void>({ url: `/embedding`, method: 'DELETE' });
};

export const getDeleteAllFilesMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteAllFiles>>,
        TError,
        void,
        TContext
    >;
}): UseMutationOptions<Awaited<ReturnType<typeof deleteAllFiles>>, TError, void, TContext> => {
    const { mutation: mutationOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAllFiles>>, void> = () => {
        return deleteAllFiles();
    };

    return { mutationFn, ...mutationOptions };
};

export type DeleteAllFilesMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAllFiles>>>;

export type DeleteAllFilesMutationError = unknown;

/**
 * @summary Delete all files
 */
export const useDeleteAllFiles = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteAllFiles>>,
        TError,
        void,
        TContext
    >;
}): UseMutationResult<Awaited<ReturnType<typeof deleteAllFiles>>, TError, void, TContext> => {
    const mutationOptions = getDeleteAllFilesMutationOptions(options);

    return useMutation(mutationOptions);
};

/**
 * Delete a file from the embedding service
 * @summary Delete a file
 */
export const deleteFile = (id: string) => {
    return customInstance<void>({ url: `/embedding/${id}`, method: 'DELETE' });
};

export const getDeleteFileMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteFile>>,
        TError,
        { id: string },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof deleteFile>>,
    TError,
    { id: string },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteFile>>, { id: string }> = (
        props,
    ) => {
        const { id } = props ?? {};

        return deleteFile(id);
    };

    return { mutationFn, ...mutationOptions };
};

export type DeleteFileMutationResult = NonNullable<Awaited<ReturnType<typeof deleteFile>>>;

export type DeleteFileMutationError = unknown;

/**
 * @summary Delete a file
 */
export const useDeleteFile = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteFile>>,
        TError,
        { id: string },
        TContext
    >;
}): UseMutationResult<Awaited<ReturnType<typeof deleteFile>>, TError, { id: string }, TContext> => {
    const mutationOptions = getDeleteFileMutationOptions(options);

    return useMutation(mutationOptions);
};

/**
 * Delete all file embeddings
 * @summary Delete all file embeddings
 */
export const deleteFileEmbeddings = (id: string) => {
    return customInstance<void>({ url: `/embedding/${id}/embeddings`, method: 'DELETE' });
};

export const getDeleteFileEmbeddingsMutationOptions = <
    TError = unknown,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteFileEmbeddings>>,
        TError,
        { id: string },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof deleteFileEmbeddings>>,
    TError,
    { id: string },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof deleteFileEmbeddings>>,
        { id: string }
    > = (props) => {
        const { id } = props ?? {};

        return deleteFileEmbeddings(id);
    };

    return { mutationFn, ...mutationOptions };
};

export type DeleteFileEmbeddingsMutationResult = NonNullable<
    Awaited<ReturnType<typeof deleteFileEmbeddings>>
>;

export type DeleteFileEmbeddingsMutationError = unknown;

/**
 * @summary Delete all file embeddings
 */
export const useDeleteFileEmbeddings = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteFileEmbeddings>>,
        TError,
        { id: string },
        TContext
    >;
}): UseMutationResult<
    Awaited<ReturnType<typeof deleteFileEmbeddings>>,
    TError,
    { id: string },
    TContext
> => {
    const mutationOptions = getDeleteFileEmbeddingsMutationOptions(options);

    return useMutation(mutationOptions);
};

/**
 * Create file embeddings
 * @summary Create file embeddings
 */
export const embedFile = (id: string) => {
    return customInstance<void>({ url: `/embedding/${id}/embeddings`, method: 'POST' });
};

export const getEmbedFileMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof embedFile>>,
        TError,
        { id: string },
        TContext
    >;
}): UseMutationOptions<Awaited<ReturnType<typeof embedFile>>, TError, { id: string }, TContext> => {
    const { mutation: mutationOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof embedFile>>, { id: string }> = (
        props,
    ) => {
        const { id } = props ?? {};

        return embedFile(id);
    };

    return { mutationFn, ...mutationOptions };
};

export type EmbedFileMutationResult = NonNullable<Awaited<ReturnType<typeof embedFile>>>;

export type EmbedFileMutationError = unknown;

/**
 * @summary Create file embeddings
 */
export const useEmbedFile = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof embedFile>>,
        TError,
        { id: string },
        TContext
    >;
}): UseMutationResult<Awaited<ReturnType<typeof embedFile>>, TError, { id: string }, TContext> => {
    const mutationOptions = getEmbedFileMutationOptions(options);

    return useMutation(mutationOptions);
};

/**
 * Query embeddings
 * @summary Query embeddings
 */
export const queryEmbeddingsById = (
    id: string,
    params: QueryEmbeddingsByIdParams,
    signal?: AbortSignal,
) => {
    return customInstance<QueryEmbeddingsById200>({
        url: `/embedding/${id}/query`,
        method: 'GET',
        params,
        signal,
    });
};

export const getQueryEmbeddingsByIdQueryKey = (id: string, params: QueryEmbeddingsByIdParams) => {
    return [`/embedding/${id}/query`, ...(params ? [params] : [])] as const;
};

export const getQueryEmbeddingsByIdQueryOptions = <
    TData = Awaited<ReturnType<typeof queryEmbeddingsById>>,
    TError = unknown,
>(
    id: string,
    params: QueryEmbeddingsByIdParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof queryEmbeddingsById>>, TError, TData>
        >;
    },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getQueryEmbeddingsByIdQueryKey(id, params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof queryEmbeddingsById>>> = ({ signal }) =>
        queryEmbeddingsById(id, params, signal);

    return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof queryEmbeddingsById>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type QueryEmbeddingsByIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof queryEmbeddingsById>>
>;
export type QueryEmbeddingsByIdQueryError = unknown;

export function useQueryEmbeddingsById<
    TData = Awaited<ReturnType<typeof queryEmbeddingsById>>,
    TError = unknown,
>(
    id: string,
    params: QueryEmbeddingsByIdParams,
    options: {
        query: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof queryEmbeddingsById>>, TError, TData>
        > &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof queryEmbeddingsById>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useQueryEmbeddingsById<
    TData = Awaited<ReturnType<typeof queryEmbeddingsById>>,
    TError = unknown,
>(
    id: string,
    params: QueryEmbeddingsByIdParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof queryEmbeddingsById>>, TError, TData>
        > &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof queryEmbeddingsById>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useQueryEmbeddingsById<
    TData = Awaited<ReturnType<typeof queryEmbeddingsById>>,
    TError = unknown,
>(
    id: string,
    params: QueryEmbeddingsByIdParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof queryEmbeddingsById>>, TError, TData>
        >;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Query embeddings
 */

export function useQueryEmbeddingsById<
    TData = Awaited<ReturnType<typeof queryEmbeddingsById>>,
    TError = unknown,
>(
    id: string,
    params: QueryEmbeddingsByIdParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof queryEmbeddingsById>>, TError, TData>
        >;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getQueryEmbeddingsByIdQueryOptions(id, params, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * Query embeddings
 * @summary Query embeddings
 */
export const queryEmbeddings = (params: QueryEmbeddingsParams, signal?: AbortSignal) => {
    return customInstance<QueryEmbeddings200>({
        url: `/embedding/query`,
        method: 'GET',
        params,
        signal,
    });
};

export const getQueryEmbeddingsQueryKey = (params: QueryEmbeddingsParams) => {
    return [`/embedding/query`, ...(params ? [params] : [])] as const;
};

export const getQueryEmbeddingsQueryOptions = <
    TData = Awaited<ReturnType<typeof queryEmbeddings>>,
    TError = unknown,
>(
    params: QueryEmbeddingsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof queryEmbeddings>>, TError, TData>
        >;
    },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getQueryEmbeddingsQueryKey(params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof queryEmbeddings>>> = ({ signal }) =>
        queryEmbeddings(params, signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof queryEmbeddings>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type QueryEmbeddingsQueryResult = NonNullable<Awaited<ReturnType<typeof queryEmbeddings>>>;
export type QueryEmbeddingsQueryError = unknown;

export function useQueryEmbeddings<
    TData = Awaited<ReturnType<typeof queryEmbeddings>>,
    TError = unknown,
>(
    params: QueryEmbeddingsParams,
    options: {
        query: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof queryEmbeddings>>, TError, TData>
        > &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof queryEmbeddings>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useQueryEmbeddings<
    TData = Awaited<ReturnType<typeof queryEmbeddings>>,
    TError = unknown,
>(
    params: QueryEmbeddingsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof queryEmbeddings>>, TError, TData>
        > &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof queryEmbeddings>>,
                    TError,
                    TData
                >,
                'initialData'
            >;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useQueryEmbeddings<
    TData = Awaited<ReturnType<typeof queryEmbeddings>>,
    TError = unknown,
>(
    params: QueryEmbeddingsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof queryEmbeddings>>, TError, TData>
        >;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Query embeddings
 */

export function useQueryEmbeddings<
    TData = Awaited<ReturnType<typeof queryEmbeddings>>,
    TError = unknown,
>(
    params: QueryEmbeddingsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<Awaited<ReturnType<typeof queryEmbeddings>>, TError, TData>
        >;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getQueryEmbeddingsQueryOptions(params, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

/**
 * Convert a PDF file to an text
 * @summary Convert a PDF file to an text
 */
export const convertPdfToImage = (
    convertPdfToImageBody: ConvertPdfToImageBody,
    params?: ConvertPdfToImageParams,
) => {
    const formData = new FormData();
    formData.append('file', convertPdfToImageBody.file);

    return customInstance<string>({
        url: `/embedding/convert/pdf_to_text`,
        method: 'POST',
        headers: { 'Content-Type': 'multipart/form-data' },
        data: formData,
        params,
    });
};

export const getConvertPdfToImageMutationOptions = <
    TError = unknown,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof convertPdfToImage>>,
        TError,
        { data: ConvertPdfToImageBody; params?: ConvertPdfToImageParams },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof convertPdfToImage>>,
    TError,
    { data: ConvertPdfToImageBody; params?: ConvertPdfToImageParams },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof convertPdfToImage>>,
        { data: ConvertPdfToImageBody; params?: ConvertPdfToImageParams }
    > = (props) => {
        const { data, params } = props ?? {};

        return convertPdfToImage(data, params);
    };

    return { mutationFn, ...mutationOptions };
};

export type ConvertPdfToImageMutationResult = NonNullable<
    Awaited<ReturnType<typeof convertPdfToImage>>
>;
export type ConvertPdfToImageMutationBody = ConvertPdfToImageBody;
export type ConvertPdfToImageMutationError = unknown;

/**
 * @summary Convert a PDF file to an text
 */
export const useConvertPdfToImage = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof convertPdfToImage>>,
        TError,
        { data: ConvertPdfToImageBody; params?: ConvertPdfToImageParams },
        TContext
    >;
}): UseMutationResult<
    Awaited<ReturnType<typeof convertPdfToImage>>,
    TError,
    { data: ConvertPdfToImageBody; params?: ConvertPdfToImageParams },
    TContext
> => {
    const mutationOptions = getConvertPdfToImageMutationOptions(options);

    return useMutation(mutationOptions);
};

/**
 * Gets or creates a user by phone number and returns the starting conversation details
 * @summary Starts a conversation via phone
 */
export const startConversation = (phoneNumber: string) => {
    return customInstance<UserGetResponse>({
        url: `/conversation/start_by_phone/${phoneNumber}`,
        method: 'POST',
    });
};

export const getStartConversationMutationOptions = <
    TError = unknown,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof startConversation>>,
        TError,
        { phoneNumber: string },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof startConversation>>,
    TError,
    { phoneNumber: string },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof startConversation>>,
        { phoneNumber: string }
    > = (props) => {
        const { phoneNumber } = props ?? {};

        return startConversation(phoneNumber);
    };

    return { mutationFn, ...mutationOptions };
};

export type StartConversationMutationResult = NonNullable<
    Awaited<ReturnType<typeof startConversation>>
>;

export type StartConversationMutationError = unknown;

/**
 * @summary Starts a conversation via phone
 */
export const useStartConversation = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof startConversation>>,
        TError,
        { phoneNumber: string },
        TContext
    >;
}): UseMutationResult<
    Awaited<ReturnType<typeof startConversation>>,
    TError,
    { phoneNumber: string },
    TContext
> => {
    const mutationOptions = getStartConversationMutationOptions(options);

    return useMutation(mutationOptions);
};
