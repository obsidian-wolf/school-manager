/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * elliemd_api
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	MutationFunction,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from '@tanstack/react-query';
import type {
	AdminLoginRequest,
	BillingAndShippingInfoRequest,
	ClassHeartbeat200,
	CreateAdHocOrderInstallmentParams,
	CreateSyncAppointmentRequest,
	GenerateReceiptParams,
	GetAdHocOrderInstallmentParams,
	GetNexioAdHocPaymentUrlParams,
	GetNexioPayInFullPaymentUrlParams,
	GetNexioPayOverTimePaymentUrlParams,
	GetQuestionnairePaymentUrlBody,
	OrderDetails,
	OrderInstallmentDetails,
	PrescriberyReassessmentPaymentRequest,
	ProcessAdHocNexioPaymentParams,
	ProcessAfterpayPaymentCancelParams,
	ProcessAfterpayPaymentConfirmParams,
	ProcessNexioPayInFullPaymentParams,
	ProcessNexioPayOverTimePaymentParams,
	ProcessSubmissionsParams,
	QuestionnaireRequest,
	RecordStringAny,
	RecordStringAvailableSlotArray,
	RecreateReassessmentParams,
	UpgradeOrderParams,
} from './model';
import { customInstance } from './custom_instance';

export const createQuestionnaire = (questionnaireRequest: QuestionnaireRequest) => {
	return customInstance<string>({
		url: `/user/questionnaire`,
		method: 'POST',
		headers: { 'Content-Type': 'application/json' },
		data: questionnaireRequest,
	});
};

export const getCreateQuestionnaireMutationOptions = <
	TError = unknown,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createQuestionnaire>>,
		TError,
		{ data: QuestionnaireRequest },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof createQuestionnaire>>,
	TError,
	{ data: QuestionnaireRequest },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createQuestionnaire>>,
		{ data: QuestionnaireRequest }
	> = (props) => {
		const { data } = props ?? {};

		return createQuestionnaire(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreateQuestionnaireMutationResult = NonNullable<
	Awaited<ReturnType<typeof createQuestionnaire>>
>;
export type CreateQuestionnaireMutationBody = QuestionnaireRequest;
export type CreateQuestionnaireMutationError = unknown;

export const useCreateQuestionnaire = <TError = unknown, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createQuestionnaire>>,
		TError,
		{ data: QuestionnaireRequest },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof createQuestionnaire>>,
	TError,
	{ data: QuestionnaireRequest },
	TContext
> => {
	const mutationOptions = getCreateQuestionnaireMutationOptions(options);

	return useMutation(mutationOptions);
};

export const getQuestionnairePaymentUrl = (
	getQuestionnairePaymentUrlBody: GetQuestionnairePaymentUrlBody
) => {
	return customInstance<string>({
		url: `/user/questionnaire/pay`,
		method: 'POST',
		headers: { 'Content-Type': 'application/json' },
		data: getQuestionnairePaymentUrlBody,
	});
};

export const getGetQuestionnairePaymentUrlMutationOptions = <
	TError = unknown,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof getQuestionnairePaymentUrl>>,
		TError,
		{ data: GetQuestionnairePaymentUrlBody },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof getQuestionnairePaymentUrl>>,
	TError,
	{ data: GetQuestionnairePaymentUrlBody },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof getQuestionnairePaymentUrl>>,
		{ data: GetQuestionnairePaymentUrlBody }
	> = (props) => {
		const { data } = props ?? {};

		return getQuestionnairePaymentUrl(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type GetQuestionnairePaymentUrlMutationResult = NonNullable<
	Awaited<ReturnType<typeof getQuestionnairePaymentUrl>>
>;
export type GetQuestionnairePaymentUrlMutationBody = GetQuestionnairePaymentUrlBody;
export type GetQuestionnairePaymentUrlMutationError = unknown;

export const useGetQuestionnairePaymentUrl = <TError = unknown, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof getQuestionnairePaymentUrl>>,
		TError,
		{ data: GetQuestionnairePaymentUrlBody },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof getQuestionnairePaymentUrl>>,
	TError,
	{ data: GetQuestionnairePaymentUrlBody },
	TContext
> => {
	const mutationOptions = getGetQuestionnairePaymentUrlMutationOptions(options);

	return useMutation(mutationOptions);
};

export const webhook = (recordStringAny: RecordStringAny) => {
	return customInstance<string>({
		url: `/prescribery/webhook`,
		method: 'POST',
		headers: { 'Content-Type': 'application/json' },
		data: recordStringAny,
	});
};

export const getWebhookMutationOptions = <TError = unknown, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof webhook>>,
		TError,
		{ data: RecordStringAny },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof webhook>>,
	TError,
	{ data: RecordStringAny },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof webhook>>,
		{ data: RecordStringAny }
	> = (props) => {
		const { data } = props ?? {};

		return webhook(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type WebhookMutationResult = NonNullable<Awaited<ReturnType<typeof webhook>>>;
export type WebhookMutationBody = RecordStringAny;
export type WebhookMutationError = unknown;

export const useWebhook = <TError = unknown, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof webhook>>,
		TError,
		{ data: RecordStringAny },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof webhook>>,
	TError,
	{ data: RecordStringAny },
	TContext
> => {
	const mutationOptions = getWebhookMutationOptions(options);

	return useMutation(mutationOptions);
};

export const getReassessmentCheckoutUrl = (
	prescriberyReassessmentPaymentRequest: PrescriberyReassessmentPaymentRequest
) => {
	return customInstance<string>({
		url: `/prescribery/pay`,
		method: 'POST',
		headers: { 'Content-Type': 'application/json' },
		data: prescriberyReassessmentPaymentRequest,
	});
};

export const getGetReassessmentCheckoutUrlMutationOptions = <
	TError = unknown,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof getReassessmentCheckoutUrl>>,
		TError,
		{ data: PrescriberyReassessmentPaymentRequest },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof getReassessmentCheckoutUrl>>,
	TError,
	{ data: PrescriberyReassessmentPaymentRequest },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof getReassessmentCheckoutUrl>>,
		{ data: PrescriberyReassessmentPaymentRequest }
	> = (props) => {
		const { data } = props ?? {};

		return getReassessmentCheckoutUrl(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type GetReassessmentCheckoutUrlMutationResult = NonNullable<
	Awaited<ReturnType<typeof getReassessmentCheckoutUrl>>
>;
export type GetReassessmentCheckoutUrlMutationBody = PrescriberyReassessmentPaymentRequest;
export type GetReassessmentCheckoutUrlMutationError = unknown;

export const useGetReassessmentCheckoutUrl = <TError = unknown, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof getReassessmentCheckoutUrl>>,
		TError,
		{ data: PrescriberyReassessmentPaymentRequest },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof getReassessmentCheckoutUrl>>,
	TError,
	{ data: PrescriberyReassessmentPaymentRequest },
	TContext
> => {
	const mutationOptions = getGetReassessmentCheckoutUrlMutationOptions(options);

	return useMutation(mutationOptions);
};

/**
 * Details
 */
export const submitBillingAndShipping = (
	orderId: string,
	billingAndShippingInfoRequest: BillingAndShippingInfoRequest
) => {
	return customInstance<void>({
		url: `/pay/billing-and-shipping/${orderId}`,
		method: 'POST',
		headers: { 'Content-Type': 'application/json' },
		data: billingAndShippingInfoRequest,
	});
};

export const getSubmitBillingAndShippingMutationOptions = <
	TError = unknown,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof submitBillingAndShipping>>,
		TError,
		{ orderId: string; data: BillingAndShippingInfoRequest },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof submitBillingAndShipping>>,
	TError,
	{ orderId: string; data: BillingAndShippingInfoRequest },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof submitBillingAndShipping>>,
		{ orderId: string; data: BillingAndShippingInfoRequest }
	> = (props) => {
		const { orderId, data } = props ?? {};

		return submitBillingAndShipping(orderId, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type SubmitBillingAndShippingMutationResult = NonNullable<
	Awaited<ReturnType<typeof submitBillingAndShipping>>
>;
export type SubmitBillingAndShippingMutationBody = BillingAndShippingInfoRequest;
export type SubmitBillingAndShippingMutationError = unknown;

export const useSubmitBillingAndShipping = <TError = unknown, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof submitBillingAndShipping>>,
		TError,
		{ orderId: string; data: BillingAndShippingInfoRequest },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof submitBillingAndShipping>>,
	TError,
	{ orderId: string; data: BillingAndShippingInfoRequest },
	TContext
> => {
	const mutationOptions = getSubmitBillingAndShippingMutationOptions(options);

	return useMutation(mutationOptions);
};

export const getOrderDetails = (orderId: string, signal?: AbortSignal) => {
	return customInstance<OrderDetails>({ url: `/pay/details/${orderId}`, method: 'GET', signal });
};

export const getGetOrderDetailsQueryKey = (orderId: string) => {
	return [`/pay/details/${orderId}`] as const;
};

export const getGetOrderDetailsQueryOptions = <
	TData = Awaited<ReturnType<typeof getOrderDetails>>,
	TError = unknown,
>(
	orderId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getOrderDetails>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetOrderDetailsQueryKey(orderId);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderDetails>>> = ({ signal }) =>
		getOrderDetails(orderId, signal);

	return { queryKey, queryFn, enabled: !!orderId, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getOrderDetails>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type GetOrderDetailsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderDetails>>>;
export type GetOrderDetailsQueryError = unknown;

export function useGetOrderDetails<
	TData = Awaited<ReturnType<typeof getOrderDetails>>,
	TError = unknown,
>(
	orderId: string,
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getOrderDetails>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getOrderDetails>>,
					TError,
					TData
				>,
				'initialData'
			>;
	}
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetOrderDetails<
	TData = Awaited<ReturnType<typeof getOrderDetails>>,
	TError = unknown,
>(
	orderId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getOrderDetails>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getOrderDetails>>,
					TError,
					TData
				>,
				'initialData'
			>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetOrderDetails<
	TData = Awaited<ReturnType<typeof getOrderDetails>>,
	TError = unknown,
>(
	orderId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getOrderDetails>>, TError, TData>
		>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetOrderDetails<
	TData = Awaited<ReturnType<typeof getOrderDetails>>,
	TError = unknown,
>(
	orderId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getOrderDetails>>, TError, TData>
		>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getGetOrderDetailsQueryOptions(orderId, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
}

/**
 * Nexio pay in full
 */
export const getNexioPayInFullPaymentUrl = (
	orderId: string,
	params?: GetNexioPayInFullPaymentUrlParams,
	signal?: AbortSignal
) => {
	return customInstance<string>({
		url: `/pay/nexio-pay-in-full/${orderId}/url`,
		method: 'GET',
		params,
		signal,
	});
};

export const getGetNexioPayInFullPaymentUrlQueryKey = (
	orderId: string,
	params?: GetNexioPayInFullPaymentUrlParams
) => {
	return [`/pay/nexio-pay-in-full/${orderId}/url`, ...(params ? [params] : [])] as const;
};

export const getGetNexioPayInFullPaymentUrlQueryOptions = <
	TData = Awaited<ReturnType<typeof getNexioPayInFullPaymentUrl>>,
	TError = unknown,
>(
	orderId: string,
	params?: GetNexioPayInFullPaymentUrlParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getNexioPayInFullPaymentUrl>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getGetNexioPayInFullPaymentUrlQueryKey(orderId, params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getNexioPayInFullPaymentUrl>>> = ({
		signal,
	}) => getNexioPayInFullPaymentUrl(orderId, params, signal);

	return { queryKey, queryFn, enabled: !!orderId, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getNexioPayInFullPaymentUrl>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type GetNexioPayInFullPaymentUrlQueryResult = NonNullable<
	Awaited<ReturnType<typeof getNexioPayInFullPaymentUrl>>
>;
export type GetNexioPayInFullPaymentUrlQueryError = unknown;

export function useGetNexioPayInFullPaymentUrl<
	TData = Awaited<ReturnType<typeof getNexioPayInFullPaymentUrl>>,
	TError = unknown,
>(
	orderId: string,
	params: undefined | GetNexioPayInFullPaymentUrlParams,
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getNexioPayInFullPaymentUrl>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getNexioPayInFullPaymentUrl>>,
					TError,
					TData
				>,
				'initialData'
			>;
	}
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetNexioPayInFullPaymentUrl<
	TData = Awaited<ReturnType<typeof getNexioPayInFullPaymentUrl>>,
	TError = unknown,
>(
	orderId: string,
	params?: GetNexioPayInFullPaymentUrlParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getNexioPayInFullPaymentUrl>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getNexioPayInFullPaymentUrl>>,
					TError,
					TData
				>,
				'initialData'
			>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetNexioPayInFullPaymentUrl<
	TData = Awaited<ReturnType<typeof getNexioPayInFullPaymentUrl>>,
	TError = unknown,
>(
	orderId: string,
	params?: GetNexioPayInFullPaymentUrlParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getNexioPayInFullPaymentUrl>>, TError, TData>
		>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetNexioPayInFullPaymentUrl<
	TData = Awaited<ReturnType<typeof getNexioPayInFullPaymentUrl>>,
	TError = unknown,
>(
	orderId: string,
	params?: GetNexioPayInFullPaymentUrlParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getNexioPayInFullPaymentUrl>>, TError, TData>
		>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getGetNexioPayInFullPaymentUrlQueryOptions(orderId, params, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const processNexioPayInFullPayment = (
	orderId: string,
	params: ProcessNexioPayInFullPaymentParams
) => {
	return customInstance<string>({
		url: `/pay/nexio-pay-in-full/${orderId}/process`,
		method: 'POST',
		params,
	});
};

export const getProcessNexioPayInFullPaymentMutationOptions = <
	TError = unknown,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof processNexioPayInFullPayment>>,
		TError,
		{ orderId: string; params: ProcessNexioPayInFullPaymentParams },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof processNexioPayInFullPayment>>,
	TError,
	{ orderId: string; params: ProcessNexioPayInFullPaymentParams },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof processNexioPayInFullPayment>>,
		{ orderId: string; params: ProcessNexioPayInFullPaymentParams }
	> = (props) => {
		const { orderId, params } = props ?? {};

		return processNexioPayInFullPayment(orderId, params);
	};

	return { mutationFn, ...mutationOptions };
};

export type ProcessNexioPayInFullPaymentMutationResult = NonNullable<
	Awaited<ReturnType<typeof processNexioPayInFullPayment>>
>;

export type ProcessNexioPayInFullPaymentMutationError = unknown;

export const useProcessNexioPayInFullPayment = <TError = unknown, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof processNexioPayInFullPayment>>,
		TError,
		{ orderId: string; params: ProcessNexioPayInFullPaymentParams },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof processNexioPayInFullPayment>>,
	TError,
	{ orderId: string; params: ProcessNexioPayInFullPaymentParams },
	TContext
> => {
	const mutationOptions = getProcessNexioPayInFullPaymentMutationOptions(options);

	return useMutation(mutationOptions);
};

/**
 * Nexio pay over time
 */
export const getNexioPayOverTimePaymentUrl = (
	orderId: string,
	params?: GetNexioPayOverTimePaymentUrlParams,
	signal?: AbortSignal
) => {
	return customInstance<string>({
		url: `/pay/nexio-pay-over-time/${orderId}/url`,
		method: 'GET',
		params,
		signal,
	});
};

export const getGetNexioPayOverTimePaymentUrlQueryKey = (
	orderId: string,
	params?: GetNexioPayOverTimePaymentUrlParams
) => {
	return [`/pay/nexio-pay-over-time/${orderId}/url`, ...(params ? [params] : [])] as const;
};

export const getGetNexioPayOverTimePaymentUrlQueryOptions = <
	TData = Awaited<ReturnType<typeof getNexioPayOverTimePaymentUrl>>,
	TError = unknown,
>(
	orderId: string,
	params?: GetNexioPayOverTimePaymentUrlParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getNexioPayOverTimePaymentUrl>>,
				TError,
				TData
			>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey =
		queryOptions?.queryKey ?? getGetNexioPayOverTimePaymentUrlQueryKey(orderId, params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getNexioPayOverTimePaymentUrl>>> = ({
		signal,
	}) => getNexioPayOverTimePaymentUrl(orderId, params, signal);

	return { queryKey, queryFn, enabled: !!orderId, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getNexioPayOverTimePaymentUrl>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type GetNexioPayOverTimePaymentUrlQueryResult = NonNullable<
	Awaited<ReturnType<typeof getNexioPayOverTimePaymentUrl>>
>;
export type GetNexioPayOverTimePaymentUrlQueryError = unknown;

export function useGetNexioPayOverTimePaymentUrl<
	TData = Awaited<ReturnType<typeof getNexioPayOverTimePaymentUrl>>,
	TError = unknown,
>(
	orderId: string,
	params: undefined | GetNexioPayOverTimePaymentUrlParams,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getNexioPayOverTimePaymentUrl>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getNexioPayOverTimePaymentUrl>>,
					TError,
					TData
				>,
				'initialData'
			>;
	}
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetNexioPayOverTimePaymentUrl<
	TData = Awaited<ReturnType<typeof getNexioPayOverTimePaymentUrl>>,
	TError = unknown,
>(
	orderId: string,
	params?: GetNexioPayOverTimePaymentUrlParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getNexioPayOverTimePaymentUrl>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getNexioPayOverTimePaymentUrl>>,
					TError,
					TData
				>,
				'initialData'
			>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetNexioPayOverTimePaymentUrl<
	TData = Awaited<ReturnType<typeof getNexioPayOverTimePaymentUrl>>,
	TError = unknown,
>(
	orderId: string,
	params?: GetNexioPayOverTimePaymentUrlParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getNexioPayOverTimePaymentUrl>>,
				TError,
				TData
			>
		>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetNexioPayOverTimePaymentUrl<
	TData = Awaited<ReturnType<typeof getNexioPayOverTimePaymentUrl>>,
	TError = unknown,
>(
	orderId: string,
	params?: GetNexioPayOverTimePaymentUrlParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof getNexioPayOverTimePaymentUrl>>,
				TError,
				TData
			>
		>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getGetNexioPayOverTimePaymentUrlQueryOptions(orderId, params, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const processNexioPayOverTimePayment = (
	orderId: string,
	params: ProcessNexioPayOverTimePaymentParams
) => {
	return customInstance<string>({
		url: `/pay/nexio-pay-over-time/${orderId}/process`,
		method: 'POST',
		params,
	});
};

export const getProcessNexioPayOverTimePaymentMutationOptions = <
	TError = unknown,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof processNexioPayOverTimePayment>>,
		TError,
		{ orderId: string; params: ProcessNexioPayOverTimePaymentParams },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof processNexioPayOverTimePayment>>,
	TError,
	{ orderId: string; params: ProcessNexioPayOverTimePaymentParams },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof processNexioPayOverTimePayment>>,
		{ orderId: string; params: ProcessNexioPayOverTimePaymentParams }
	> = (props) => {
		const { orderId, params } = props ?? {};

		return processNexioPayOverTimePayment(orderId, params);
	};

	return { mutationFn, ...mutationOptions };
};

export type ProcessNexioPayOverTimePaymentMutationResult = NonNullable<
	Awaited<ReturnType<typeof processNexioPayOverTimePayment>>
>;

export type ProcessNexioPayOverTimePaymentMutationError = unknown;

export const useProcessNexioPayOverTimePayment = <TError = unknown, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof processNexioPayOverTimePayment>>,
		TError,
		{ orderId: string; params: ProcessNexioPayOverTimePaymentParams },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof processNexioPayOverTimePayment>>,
	TError,
	{ orderId: string; params: ProcessNexioPayOverTimePaymentParams },
	TContext
> => {
	const mutationOptions = getProcessNexioPayOverTimePaymentMutationOptions(options);

	return useMutation(mutationOptions);
};

/**
 * Afterpay
 */
export const processAfterpayPaymentConfirm = (
	params: ProcessAfterpayPaymentConfirmParams,
	signal?: AbortSignal
) => {
	return customInstance<void>({ url: `/pay/afterpay/confirm`, method: 'GET', params, signal });
};

export const getProcessAfterpayPaymentConfirmQueryKey = (
	params: ProcessAfterpayPaymentConfirmParams
) => {
	return [`/pay/afterpay/confirm`, ...(params ? [params] : [])] as const;
};

export const getProcessAfterpayPaymentConfirmQueryOptions = <
	TData = Awaited<ReturnType<typeof processAfterpayPaymentConfirm>>,
	TError = unknown,
>(
	params: ProcessAfterpayPaymentConfirmParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof processAfterpayPaymentConfirm>>,
				TError,
				TData
			>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getProcessAfterpayPaymentConfirmQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof processAfterpayPaymentConfirm>>> = ({
		signal,
	}) => processAfterpayPaymentConfirm(params, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof processAfterpayPaymentConfirm>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type ProcessAfterpayPaymentConfirmQueryResult = NonNullable<
	Awaited<ReturnType<typeof processAfterpayPaymentConfirm>>
>;
export type ProcessAfterpayPaymentConfirmQueryError = unknown;

export function useProcessAfterpayPaymentConfirm<
	TData = Awaited<ReturnType<typeof processAfterpayPaymentConfirm>>,
	TError = unknown,
>(
	params: ProcessAfterpayPaymentConfirmParams,
	options: {
		query: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof processAfterpayPaymentConfirm>>,
				TError,
				TData
			>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof processAfterpayPaymentConfirm>>,
					TError,
					TData
				>,
				'initialData'
			>;
	}
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useProcessAfterpayPaymentConfirm<
	TData = Awaited<ReturnType<typeof processAfterpayPaymentConfirm>>,
	TError = unknown,
>(
	params: ProcessAfterpayPaymentConfirmParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof processAfterpayPaymentConfirm>>,
				TError,
				TData
			>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof processAfterpayPaymentConfirm>>,
					TError,
					TData
				>,
				'initialData'
			>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useProcessAfterpayPaymentConfirm<
	TData = Awaited<ReturnType<typeof processAfterpayPaymentConfirm>>,
	TError = unknown,
>(
	params: ProcessAfterpayPaymentConfirmParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof processAfterpayPaymentConfirm>>,
				TError,
				TData
			>
		>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useProcessAfterpayPaymentConfirm<
	TData = Awaited<ReturnType<typeof processAfterpayPaymentConfirm>>,
	TError = unknown,
>(
	params: ProcessAfterpayPaymentConfirmParams,
	options?: {
		query?: Partial<
			UseQueryOptions<
				Awaited<ReturnType<typeof processAfterpayPaymentConfirm>>,
				TError,
				TData
			>
		>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getProcessAfterpayPaymentConfirmQueryOptions(params, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const processAfterpayPaymentCancel = (
	params: ProcessAfterpayPaymentCancelParams,
	signal?: AbortSignal
) => {
	return customInstance<void>({ url: `/pay/afterpay/cancel`, method: 'GET', params, signal });
};

export const getProcessAfterpayPaymentCancelQueryKey = (
	params: ProcessAfterpayPaymentCancelParams
) => {
	return [`/pay/afterpay/cancel`, ...(params ? [params] : [])] as const;
};

export const getProcessAfterpayPaymentCancelQueryOptions = <
	TData = Awaited<ReturnType<typeof processAfterpayPaymentCancel>>,
	TError = unknown,
>(
	params: ProcessAfterpayPaymentCancelParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof processAfterpayPaymentCancel>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getProcessAfterpayPaymentCancelQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof processAfterpayPaymentCancel>>> = ({
		signal,
	}) => processAfterpayPaymentCancel(params, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof processAfterpayPaymentCancel>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type ProcessAfterpayPaymentCancelQueryResult = NonNullable<
	Awaited<ReturnType<typeof processAfterpayPaymentCancel>>
>;
export type ProcessAfterpayPaymentCancelQueryError = unknown;

export function useProcessAfterpayPaymentCancel<
	TData = Awaited<ReturnType<typeof processAfterpayPaymentCancel>>,
	TError = unknown,
>(
	params: ProcessAfterpayPaymentCancelParams,
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof processAfterpayPaymentCancel>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof processAfterpayPaymentCancel>>,
					TError,
					TData
				>,
				'initialData'
			>;
	}
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useProcessAfterpayPaymentCancel<
	TData = Awaited<ReturnType<typeof processAfterpayPaymentCancel>>,
	TError = unknown,
>(
	params: ProcessAfterpayPaymentCancelParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof processAfterpayPaymentCancel>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof processAfterpayPaymentCancel>>,
					TError,
					TData
				>,
				'initialData'
			>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useProcessAfterpayPaymentCancel<
	TData = Awaited<ReturnType<typeof processAfterpayPaymentCancel>>,
	TError = unknown,
>(
	params: ProcessAfterpayPaymentCancelParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof processAfterpayPaymentCancel>>, TError, TData>
		>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useProcessAfterpayPaymentCancel<
	TData = Awaited<ReturnType<typeof processAfterpayPaymentCancel>>,
	TError = unknown,
>(
	params: ProcessAfterpayPaymentCancelParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof processAfterpayPaymentCancel>>, TError, TData>
		>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getProcessAfterpayPaymentCancelQueryOptions(params, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getAfterpayCheckoutUrl = (orderId: string, signal?: AbortSignal) => {
	return customInstance<string>({
		url: `/pay/afterpay/checkout/${orderId}`,
		method: 'GET',
		signal,
	});
};

export const getGetAfterpayCheckoutUrlQueryKey = (orderId: string) => {
	return [`/pay/afterpay/checkout/${orderId}`] as const;
};

export const getGetAfterpayCheckoutUrlQueryOptions = <
	TData = Awaited<ReturnType<typeof getAfterpayCheckoutUrl>>,
	TError = unknown,
>(
	orderId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getAfterpayCheckoutUrl>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetAfterpayCheckoutUrlQueryKey(orderId);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getAfterpayCheckoutUrl>>> = ({
		signal,
	}) => getAfterpayCheckoutUrl(orderId, signal);

	return { queryKey, queryFn, enabled: !!orderId, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getAfterpayCheckoutUrl>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type GetAfterpayCheckoutUrlQueryResult = NonNullable<
	Awaited<ReturnType<typeof getAfterpayCheckoutUrl>>
>;
export type GetAfterpayCheckoutUrlQueryError = unknown;

export function useGetAfterpayCheckoutUrl<
	TData = Awaited<ReturnType<typeof getAfterpayCheckoutUrl>>,
	TError = unknown,
>(
	orderId: string,
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getAfterpayCheckoutUrl>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getAfterpayCheckoutUrl>>,
					TError,
					TData
				>,
				'initialData'
			>;
	}
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAfterpayCheckoutUrl<
	TData = Awaited<ReturnType<typeof getAfterpayCheckoutUrl>>,
	TError = unknown,
>(
	orderId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getAfterpayCheckoutUrl>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getAfterpayCheckoutUrl>>,
					TError,
					TData
				>,
				'initialData'
			>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAfterpayCheckoutUrl<
	TData = Awaited<ReturnType<typeof getAfterpayCheckoutUrl>>,
	TError = unknown,
>(
	orderId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getAfterpayCheckoutUrl>>, TError, TData>
		>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetAfterpayCheckoutUrl<
	TData = Awaited<ReturnType<typeof getAfterpayCheckoutUrl>>,
	TError = unknown,
>(
	orderId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getAfterpayCheckoutUrl>>, TError, TData>
		>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getGetAfterpayCheckoutUrlQueryOptions(orderId, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const cancelOrder = (orderId: string) => {
	return customInstance<void>({ url: `/order/cancel/${orderId}`, method: 'POST' });
};

export const getCancelOrderMutationOptions = <TError = unknown, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof cancelOrder>>,
		TError,
		{ orderId: string },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof cancelOrder>>,
	TError,
	{ orderId: string },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof cancelOrder>>,
		{ orderId: string }
	> = (props) => {
		const { orderId } = props ?? {};

		return cancelOrder(orderId);
	};

	return { mutationFn, ...mutationOptions };
};

export type CancelOrderMutationResult = NonNullable<Awaited<ReturnType<typeof cancelOrder>>>;

export type CancelOrderMutationError = unknown;

export const useCancelOrder = <TError = unknown, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof cancelOrder>>,
		TError,
		{ orderId: string },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof cancelOrder>>,
	TError,
	{ orderId: string },
	TContext
> => {
	const mutationOptions = getCancelOrderMutationOptions(options);

	return useMutation(mutationOptions);
};

/**
 * Ping .. pong
 */
export const classHeartbeat = (signal?: AbortSignal) => {
	return customInstance<ClassHeartbeat200>({ url: `/heartbeat`, method: 'GET', signal });
};

export const getClassHeartbeatQueryKey = () => {
	return [`/heartbeat`] as const;
};

export const getClassHeartbeatQueryOptions = <
	TData = Awaited<ReturnType<typeof classHeartbeat>>,
	TError = unknown,
>(options?: {
	query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof classHeartbeat>>, TError, TData>>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getClassHeartbeatQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof classHeartbeat>>> = ({ signal }) =>
		classHeartbeat(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof classHeartbeat>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type ClassHeartbeatQueryResult = NonNullable<Awaited<ReturnType<typeof classHeartbeat>>>;
export type ClassHeartbeatQueryError = unknown;

export function useClassHeartbeat<
	TData = Awaited<ReturnType<typeof classHeartbeat>>,
	TError = unknown,
>(options: {
	query: Partial<UseQueryOptions<Awaited<ReturnType<typeof classHeartbeat>>, TError, TData>> &
		Pick<
			DefinedInitialDataOptions<Awaited<ReturnType<typeof classHeartbeat>>, TError, TData>,
			'initialData'
		>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useClassHeartbeat<
	TData = Awaited<ReturnType<typeof classHeartbeat>>,
	TError = unknown,
>(options?: {
	query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof classHeartbeat>>, TError, TData>> &
		Pick<
			UndefinedInitialDataOptions<Awaited<ReturnType<typeof classHeartbeat>>, TError, TData>,
			'initialData'
		>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useClassHeartbeat<
	TData = Awaited<ReturnType<typeof classHeartbeat>>,
	TError = unknown,
>(options?: {
	query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof classHeartbeat>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useClassHeartbeat<
	TData = Awaited<ReturnType<typeof classHeartbeat>>,
	TError = unknown,
>(options?: {
	query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof classHeartbeat>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getClassHeartbeatQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const adminLogin = (adminLoginRequest: AdminLoginRequest) => {
	return customInstance<string>({
		url: `/auth/admin-login`,
		method: 'PUT',
		headers: { 'Content-Type': 'application/json' },
		data: adminLoginRequest,
	});
};

export const getAdminLoginMutationOptions = <TError = unknown, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof adminLogin>>,
		TError,
		{ data: AdminLoginRequest },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof adminLogin>>,
	TError,
	{ data: AdminLoginRequest },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof adminLogin>>,
		{ data: AdminLoginRequest }
	> = (props) => {
		const { data } = props ?? {};

		return adminLogin(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type AdminLoginMutationResult = NonNullable<Awaited<ReturnType<typeof adminLogin>>>;
export type AdminLoginMutationBody = AdminLoginRequest;
export type AdminLoginMutationError = unknown;

export const useAdminLogin = <TError = unknown, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof adminLogin>>,
		TError,
		{ data: AdminLoginRequest },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof adminLogin>>,
	TError,
	{ data: AdminLoginRequest },
	TContext
> => {
	const mutationOptions = getAdminLoginMutationOptions(options);

	return useMutation(mutationOptions);
};

export const test = () => {
	return customInstance<boolean>({ url: `/auth/test`, method: 'POST' });
};

export const getTestMutationOptions = <TError = unknown, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<Awaited<ReturnType<typeof test>>, TError, void, TContext>;
}): UseMutationOptions<Awaited<ReturnType<typeof test>>, TError, void, TContext> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<Awaited<ReturnType<typeof test>>, void> = () => {
		return test();
	};

	return { mutationFn, ...mutationOptions };
};

export type TestMutationResult = NonNullable<Awaited<ReturnType<typeof test>>>;

export type TestMutationError = unknown;

export const useTest = <TError = unknown, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<Awaited<ReturnType<typeof test>>, TError, void, TContext>;
}): UseMutationResult<Awaited<ReturnType<typeof test>>, TError, void, TContext> => {
	const mutationOptions = getTestMutationOptions(options);

	return useMutation(mutationOptions);
};

export const processSubmissions = (params?: ProcessSubmissionsParams, signal?: AbortSignal) => {
	return customInstance<RecordStringAny>({
		url: `/auth/trinity-submissions`,
		method: 'GET',
		params,
		signal,
	});
};

export const getProcessSubmissionsQueryKey = (params?: ProcessSubmissionsParams) => {
	return [`/auth/trinity-submissions`, ...(params ? [params] : [])] as const;
};

export const getProcessSubmissionsQueryOptions = <
	TData = Awaited<ReturnType<typeof processSubmissions>>,
	TError = unknown,
>(
	params?: ProcessSubmissionsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof processSubmissions>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getProcessSubmissionsQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof processSubmissions>>> = ({ signal }) =>
		processSubmissions(params, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof processSubmissions>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type ProcessSubmissionsQueryResult = NonNullable<
	Awaited<ReturnType<typeof processSubmissions>>
>;
export type ProcessSubmissionsQueryError = unknown;

export function useProcessSubmissions<
	TData = Awaited<ReturnType<typeof processSubmissions>>,
	TError = unknown,
>(
	params: undefined | ProcessSubmissionsParams,
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof processSubmissions>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof processSubmissions>>,
					TError,
					TData
				>,
				'initialData'
			>;
	}
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useProcessSubmissions<
	TData = Awaited<ReturnType<typeof processSubmissions>>,
	TError = unknown,
>(
	params?: ProcessSubmissionsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof processSubmissions>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof processSubmissions>>,
					TError,
					TData
				>,
				'initialData'
			>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useProcessSubmissions<
	TData = Awaited<ReturnType<typeof processSubmissions>>,
	TError = unknown,
>(
	params?: ProcessSubmissionsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof processSubmissions>>, TError, TData>
		>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useProcessSubmissions<
	TData = Awaited<ReturnType<typeof processSubmissions>>,
	TError = unknown,
>(
	params?: ProcessSubmissionsParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof processSubmissions>>, TError, TData>
		>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getProcessSubmissionsQueryOptions(params, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getAppointments = (orderId: string, signal?: AbortSignal) => {
	return customInstance<RecordStringAvailableSlotArray>({
		url: `/appointment/${orderId}`,
		method: 'GET',
		signal,
	});
};

export const getGetAppointmentsQueryKey = (orderId: string) => {
	return [`/appointment/${orderId}`] as const;
};

export const getGetAppointmentsQueryOptions = <
	TData = Awaited<ReturnType<typeof getAppointments>>,
	TError = unknown,
>(
	orderId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getAppointments>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetAppointmentsQueryKey(orderId);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getAppointments>>> = ({ signal }) =>
		getAppointments(orderId, signal);

	return { queryKey, queryFn, enabled: !!orderId, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getAppointments>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type GetAppointmentsQueryResult = NonNullable<Awaited<ReturnType<typeof getAppointments>>>;
export type GetAppointmentsQueryError = unknown;

export function useGetAppointments<
	TData = Awaited<ReturnType<typeof getAppointments>>,
	TError = unknown,
>(
	orderId: string,
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getAppointments>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getAppointments>>,
					TError,
					TData
				>,
				'initialData'
			>;
	}
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAppointments<
	TData = Awaited<ReturnType<typeof getAppointments>>,
	TError = unknown,
>(
	orderId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getAppointments>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getAppointments>>,
					TError,
					TData
				>,
				'initialData'
			>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAppointments<
	TData = Awaited<ReturnType<typeof getAppointments>>,
	TError = unknown,
>(
	orderId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getAppointments>>, TError, TData>
		>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetAppointments<
	TData = Awaited<ReturnType<typeof getAppointments>>,
	TError = unknown,
>(
	orderId: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getAppointments>>, TError, TData>
		>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getGetAppointmentsQueryOptions(orderId, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const createSyncAppointment = (
	orderId: string,
	createSyncAppointmentRequest: CreateSyncAppointmentRequest
) => {
	return customInstance<void>({
		url: `/appointment/${orderId}`,
		method: 'POST',
		headers: { 'Content-Type': 'application/json' },
		data: createSyncAppointmentRequest,
	});
};

export const getCreateSyncAppointmentMutationOptions = <
	TError = unknown,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createSyncAppointment>>,
		TError,
		{ orderId: string; data: CreateSyncAppointmentRequest },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof createSyncAppointment>>,
	TError,
	{ orderId: string; data: CreateSyncAppointmentRequest },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createSyncAppointment>>,
		{ orderId: string; data: CreateSyncAppointmentRequest }
	> = (props) => {
		const { orderId, data } = props ?? {};

		return createSyncAppointment(orderId, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreateSyncAppointmentMutationResult = NonNullable<
	Awaited<ReturnType<typeof createSyncAppointment>>
>;
export type CreateSyncAppointmentMutationBody = CreateSyncAppointmentRequest;
export type CreateSyncAppointmentMutationError = unknown;

export const useCreateSyncAppointment = <TError = unknown, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createSyncAppointment>>,
		TError,
		{ orderId: string; data: CreateSyncAppointmentRequest },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof createSyncAppointment>>,
	TError,
	{ orderId: string; data: CreateSyncAppointmentRequest },
	TContext
> => {
	const mutationOptions = getCreateSyncAppointmentMutationOptions(options);

	return useMutation(mutationOptions);
};

export const createAdHocOrderInstallment = (params: CreateAdHocOrderInstallmentParams) => {
	return customInstance<string>({
		url: `/admin/create-ad-hoc-order-installment`,
		method: 'POST',
		params,
	});
};

export const getCreateAdHocOrderInstallmentMutationOptions = <
	TError = unknown,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createAdHocOrderInstallment>>,
		TError,
		{ params: CreateAdHocOrderInstallmentParams },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof createAdHocOrderInstallment>>,
	TError,
	{ params: CreateAdHocOrderInstallmentParams },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof createAdHocOrderInstallment>>,
		{ params: CreateAdHocOrderInstallmentParams }
	> = (props) => {
		const { params } = props ?? {};

		return createAdHocOrderInstallment(params);
	};

	return { mutationFn, ...mutationOptions };
};

export type CreateAdHocOrderInstallmentMutationResult = NonNullable<
	Awaited<ReturnType<typeof createAdHocOrderInstallment>>
>;

export type CreateAdHocOrderInstallmentMutationError = unknown;

export const useCreateAdHocOrderInstallment = <TError = unknown, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof createAdHocOrderInstallment>>,
		TError,
		{ params: CreateAdHocOrderInstallmentParams },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof createAdHocOrderInstallment>>,
	TError,
	{ params: CreateAdHocOrderInstallmentParams },
	TContext
> => {
	const mutationOptions = getCreateAdHocOrderInstallmentMutationOptions(options);

	return useMutation(mutationOptions);
};

export const generateReceipt = (params: GenerateReceiptParams, signal?: AbortSignal) => {
	return customInstance<string>({
		url: `/admin/generate-receipt`,
		method: 'GET',
		params,
		signal,
	});
};

export const getGenerateReceiptQueryKey = (params: GenerateReceiptParams) => {
	return [`/admin/generate-receipt`, ...(params ? [params] : [])] as const;
};

export const getGenerateReceiptQueryOptions = <
	TData = Awaited<ReturnType<typeof generateReceipt>>,
	TError = unknown,
>(
	params: GenerateReceiptParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof generateReceipt>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGenerateReceiptQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof generateReceipt>>> = ({ signal }) =>
		generateReceipt(params, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof generateReceipt>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type GenerateReceiptQueryResult = NonNullable<Awaited<ReturnType<typeof generateReceipt>>>;
export type GenerateReceiptQueryError = unknown;

export function useGenerateReceipt<
	TData = Awaited<ReturnType<typeof generateReceipt>>,
	TError = unknown,
>(
	params: GenerateReceiptParams,
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof generateReceipt>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof generateReceipt>>,
					TError,
					TData
				>,
				'initialData'
			>;
	}
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGenerateReceipt<
	TData = Awaited<ReturnType<typeof generateReceipt>>,
	TError = unknown,
>(
	params: GenerateReceiptParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof generateReceipt>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof generateReceipt>>,
					TError,
					TData
				>,
				'initialData'
			>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGenerateReceipt<
	TData = Awaited<ReturnType<typeof generateReceipt>>,
	TError = unknown,
>(
	params: GenerateReceiptParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof generateReceipt>>, TError, TData>
		>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGenerateReceipt<
	TData = Awaited<ReturnType<typeof generateReceipt>>,
	TError = unknown,
>(
	params: GenerateReceiptParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof generateReceipt>>, TError, TData>
		>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getGenerateReceiptQueryOptions(params, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const upgradeOrder = (params: UpgradeOrderParams, signal?: AbortSignal) => {
	return customInstance<string>({
		url: `/admin/upgrade-reassessment`,
		method: 'GET',
		params,
		signal,
	});
};

export const getUpgradeOrderQueryKey = (params: UpgradeOrderParams) => {
	return [`/admin/upgrade-reassessment`, ...(params ? [params] : [])] as const;
};

export const getUpgradeOrderQueryOptions = <
	TData = Awaited<ReturnType<typeof upgradeOrder>>,
	TError = unknown,
>(
	params: UpgradeOrderParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof upgradeOrder>>, TError, TData>>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getUpgradeOrderQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof upgradeOrder>>> = ({ signal }) =>
		upgradeOrder(params, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof upgradeOrder>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type UpgradeOrderQueryResult = NonNullable<Awaited<ReturnType<typeof upgradeOrder>>>;
export type UpgradeOrderQueryError = unknown;

export function useUpgradeOrder<TData = Awaited<ReturnType<typeof upgradeOrder>>, TError = unknown>(
	params: UpgradeOrderParams,
	options: {
		query: Partial<UseQueryOptions<Awaited<ReturnType<typeof upgradeOrder>>, TError, TData>> &
			Pick<
				DefinedInitialDataOptions<Awaited<ReturnType<typeof upgradeOrder>>, TError, TData>,
				'initialData'
			>;
	}
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useUpgradeOrder<TData = Awaited<ReturnType<typeof upgradeOrder>>, TError = unknown>(
	params: UpgradeOrderParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof upgradeOrder>>, TError, TData>> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof upgradeOrder>>,
					TError,
					TData
				>,
				'initialData'
			>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useUpgradeOrder<TData = Awaited<ReturnType<typeof upgradeOrder>>, TError = unknown>(
	params: UpgradeOrderParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof upgradeOrder>>, TError, TData>>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useUpgradeOrder<TData = Awaited<ReturnType<typeof upgradeOrder>>, TError = unknown>(
	params: UpgradeOrderParams,
	options?: {
		query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof upgradeOrder>>, TError, TData>>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getUpgradeOrderQueryOptions(params, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const recreateReassessment = (params: RecreateReassessmentParams, signal?: AbortSignal) => {
	return customInstance<string>({
		url: `/admin/recreate-reassessment`,
		method: 'GET',
		params,
		signal,
	});
};

export const getRecreateReassessmentQueryKey = (params: RecreateReassessmentParams) => {
	return [`/admin/recreate-reassessment`, ...(params ? [params] : [])] as const;
};

export const getRecreateReassessmentQueryOptions = <
	TData = Awaited<ReturnType<typeof recreateReassessment>>,
	TError = unknown,
>(
	params: RecreateReassessmentParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof recreateReassessment>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getRecreateReassessmentQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof recreateReassessment>>> = ({ signal }) =>
		recreateReassessment(params, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof recreateReassessment>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type RecreateReassessmentQueryResult = NonNullable<
	Awaited<ReturnType<typeof recreateReassessment>>
>;
export type RecreateReassessmentQueryError = unknown;

export function useRecreateReassessment<
	TData = Awaited<ReturnType<typeof recreateReassessment>>,
	TError = unknown,
>(
	params: RecreateReassessmentParams,
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof recreateReassessment>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof recreateReassessment>>,
					TError,
					TData
				>,
				'initialData'
			>;
	}
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useRecreateReassessment<
	TData = Awaited<ReturnType<typeof recreateReassessment>>,
	TError = unknown,
>(
	params: RecreateReassessmentParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof recreateReassessment>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof recreateReassessment>>,
					TError,
					TData
				>,
				'initialData'
			>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useRecreateReassessment<
	TData = Awaited<ReturnType<typeof recreateReassessment>>,
	TError = unknown,
>(
	params: RecreateReassessmentParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof recreateReassessment>>, TError, TData>
		>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useRecreateReassessment<
	TData = Awaited<ReturnType<typeof recreateReassessment>>,
	TError = unknown,
>(
	params: RecreateReassessmentParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof recreateReassessment>>, TError, TData>
		>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getRecreateReassessmentQueryOptions(params, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const getAdHocOrderInstallment = (
	orderId: string,
	params: GetAdHocOrderInstallmentParams,
	signal?: AbortSignal
) => {
	return customInstance<OrderInstallmentDetails>({
		url: `/ad_hoc/${orderId}/details`,
		method: 'GET',
		params,
		signal,
	});
};

export const getGetAdHocOrderInstallmentQueryKey = (
	orderId: string,
	params: GetAdHocOrderInstallmentParams
) => {
	return [`/ad_hoc/${orderId}/details`, ...(params ? [params] : [])] as const;
};

export const getGetAdHocOrderInstallmentQueryOptions = <
	TData = Awaited<ReturnType<typeof getAdHocOrderInstallment>>,
	TError = unknown,
>(
	orderId: string,
	params: GetAdHocOrderInstallmentParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getAdHocOrderInstallment>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetAdHocOrderInstallmentQueryKey(orderId, params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdHocOrderInstallment>>> = ({
		signal,
	}) => getAdHocOrderInstallment(orderId, params, signal);

	return { queryKey, queryFn, enabled: !!orderId, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getAdHocOrderInstallment>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type GetAdHocOrderInstallmentQueryResult = NonNullable<
	Awaited<ReturnType<typeof getAdHocOrderInstallment>>
>;
export type GetAdHocOrderInstallmentQueryError = unknown;

export function useGetAdHocOrderInstallment<
	TData = Awaited<ReturnType<typeof getAdHocOrderInstallment>>,
	TError = unknown,
>(
	orderId: string,
	params: GetAdHocOrderInstallmentParams,
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getAdHocOrderInstallment>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getAdHocOrderInstallment>>,
					TError,
					TData
				>,
				'initialData'
			>;
	}
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAdHocOrderInstallment<
	TData = Awaited<ReturnType<typeof getAdHocOrderInstallment>>,
	TError = unknown,
>(
	orderId: string,
	params: GetAdHocOrderInstallmentParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getAdHocOrderInstallment>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getAdHocOrderInstallment>>,
					TError,
					TData
				>,
				'initialData'
			>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAdHocOrderInstallment<
	TData = Awaited<ReturnType<typeof getAdHocOrderInstallment>>,
	TError = unknown,
>(
	orderId: string,
	params: GetAdHocOrderInstallmentParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getAdHocOrderInstallment>>, TError, TData>
		>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetAdHocOrderInstallment<
	TData = Awaited<ReturnType<typeof getAdHocOrderInstallment>>,
	TError = unknown,
>(
	orderId: string,
	params: GetAdHocOrderInstallmentParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getAdHocOrderInstallment>>, TError, TData>
		>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getGetAdHocOrderInstallmentQueryOptions(orderId, params, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
}

export const processAdHocNexioPayment = (
	orderId: string,
	params: ProcessAdHocNexioPaymentParams
) => {
	return customInstance<string>({ url: `/ad_hoc/${orderId}/process`, method: 'POST', params });
};

export const getProcessAdHocNexioPaymentMutationOptions = <
	TError = unknown,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof processAdHocNexioPayment>>,
		TError,
		{ orderId: string; params: ProcessAdHocNexioPaymentParams },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof processAdHocNexioPayment>>,
	TError,
	{ orderId: string; params: ProcessAdHocNexioPaymentParams },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof processAdHocNexioPayment>>,
		{ orderId: string; params: ProcessAdHocNexioPaymentParams }
	> = (props) => {
		const { orderId, params } = props ?? {};

		return processAdHocNexioPayment(orderId, params);
	};

	return { mutationFn, ...mutationOptions };
};

export type ProcessAdHocNexioPaymentMutationResult = NonNullable<
	Awaited<ReturnType<typeof processAdHocNexioPayment>>
>;

export type ProcessAdHocNexioPaymentMutationError = unknown;

export const useProcessAdHocNexioPayment = <TError = unknown, TContext = unknown>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof processAdHocNexioPayment>>,
		TError,
		{ orderId: string; params: ProcessAdHocNexioPaymentParams },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof processAdHocNexioPayment>>,
	TError,
	{ orderId: string; params: ProcessAdHocNexioPaymentParams },
	TContext
> => {
	const mutationOptions = getProcessAdHocNexioPaymentMutationOptions(options);

	return useMutation(mutationOptions);
};

export const getNexioAdHocPaymentUrl = (
	orderId: string,
	params: GetNexioAdHocPaymentUrlParams,
	signal?: AbortSignal
) => {
	return customInstance<string>({
		url: `/ad_hoc/${orderId}/nexio-url`,
		method: 'GET',
		params,
		signal,
	});
};

export const getGetNexioAdHocPaymentUrlQueryKey = (
	orderId: string,
	params: GetNexioAdHocPaymentUrlParams
) => {
	return [`/ad_hoc/${orderId}/nexio-url`, ...(params ? [params] : [])] as const;
};

export const getGetNexioAdHocPaymentUrlQueryOptions = <
	TData = Awaited<ReturnType<typeof getNexioAdHocPaymentUrl>>,
	TError = unknown,
>(
	orderId: string,
	params: GetNexioAdHocPaymentUrlParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getNexioAdHocPaymentUrl>>, TError, TData>
		>;
	}
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetNexioAdHocPaymentUrlQueryKey(orderId, params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof getNexioAdHocPaymentUrl>>> = ({
		signal,
	}) => getNexioAdHocPaymentUrl(orderId, params, signal);

	return { queryKey, queryFn, enabled: !!orderId, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getNexioAdHocPaymentUrl>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type GetNexioAdHocPaymentUrlQueryResult = NonNullable<
	Awaited<ReturnType<typeof getNexioAdHocPaymentUrl>>
>;
export type GetNexioAdHocPaymentUrlQueryError = unknown;

export function useGetNexioAdHocPaymentUrl<
	TData = Awaited<ReturnType<typeof getNexioAdHocPaymentUrl>>,
	TError = unknown,
>(
	orderId: string,
	params: GetNexioAdHocPaymentUrlParams,
	options: {
		query: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getNexioAdHocPaymentUrl>>, TError, TData>
		> &
			Pick<
				DefinedInitialDataOptions<
					Awaited<ReturnType<typeof getNexioAdHocPaymentUrl>>,
					TError,
					TData
				>,
				'initialData'
			>;
	}
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetNexioAdHocPaymentUrl<
	TData = Awaited<ReturnType<typeof getNexioAdHocPaymentUrl>>,
	TError = unknown,
>(
	orderId: string,
	params: GetNexioAdHocPaymentUrlParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getNexioAdHocPaymentUrl>>, TError, TData>
		> &
			Pick<
				UndefinedInitialDataOptions<
					Awaited<ReturnType<typeof getNexioAdHocPaymentUrl>>,
					TError,
					TData
				>,
				'initialData'
			>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetNexioAdHocPaymentUrl<
	TData = Awaited<ReturnType<typeof getNexioAdHocPaymentUrl>>,
	TError = unknown,
>(
	orderId: string,
	params: GetNexioAdHocPaymentUrlParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getNexioAdHocPaymentUrl>>, TError, TData>
		>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetNexioAdHocPaymentUrl<
	TData = Awaited<ReturnType<typeof getNexioAdHocPaymentUrl>>,
	TError = unknown,
>(
	orderId: string,
	params: GetNexioAdHocPaymentUrlParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof getNexioAdHocPaymentUrl>>, TError, TData>
		>;
	}
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
	const queryOptions = getGetNexioAdHocPaymentUrlQueryOptions(orderId, params, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
}
