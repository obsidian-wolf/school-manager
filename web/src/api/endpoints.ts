/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * school-manager-api
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
    DefinedInitialDataOptions,
    DefinedUseQueryResult,
    MutationFunction,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseMutationOptions,
    UseMutationResult,
    UseQueryOptions,
    UseQueryResult,
} from '@tanstack/react-query';
import type {
    ClassHeartbeat200,
    CreateStudent200,
    DeleteStudent200,
    GetChat200,
    GetChatParams,
    Login200,
    LoginBody,
    SendMessage200,
    TextBody,
    UpdateParent200,
    UpdateParentRequest,
    UpdateStudent200,
    UpdateStudentRequest,
} from './model';
import { customInstance } from './custom_instance';

export const updateParent = (parentId: string, updateParentRequest: UpdateParentRequest) => {
    return customInstance<UpdateParent200>({
        url: `/user/parent/${parentId}`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: updateParentRequest,
    });
};

export const getUpdateParentMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof updateParent>>,
        TError,
        { parentId: string; data: UpdateParentRequest },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof updateParent>>,
    TError,
    { parentId: string; data: UpdateParentRequest },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof updateParent>>,
        { parentId: string; data: UpdateParentRequest }
    > = (props) => {
        const { parentId, data } = props ?? {};

        return updateParent(parentId, data);
    };

    return { mutationFn, ...mutationOptions };
};

export type UpdateParentMutationResult = NonNullable<Awaited<ReturnType<typeof updateParent>>>;
export type UpdateParentMutationBody = UpdateParentRequest;
export type UpdateParentMutationError = unknown;

export const useUpdateParent = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof updateParent>>,
        TError,
        { parentId: string; data: UpdateParentRequest },
        TContext
    >;
}): UseMutationResult<
    Awaited<ReturnType<typeof updateParent>>,
    TError,
    { parentId: string; data: UpdateParentRequest },
    TContext
> => {
    const mutationOptions = getUpdateParentMutationOptions(options);

    return useMutation(mutationOptions);
};

export const createStudent = (parentId: string, updateStudentRequest: UpdateStudentRequest) => {
    return customInstance<CreateStudent200>({
        url: `/user/parent/${parentId}/student`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: updateStudentRequest,
    });
};

export const getCreateStudentMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof createStudent>>,
        TError,
        { parentId: string; data: UpdateStudentRequest },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof createStudent>>,
    TError,
    { parentId: string; data: UpdateStudentRequest },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof createStudent>>,
        { parentId: string; data: UpdateStudentRequest }
    > = (props) => {
        const { parentId, data } = props ?? {};

        return createStudent(parentId, data);
    };

    return { mutationFn, ...mutationOptions };
};

export type CreateStudentMutationResult = NonNullable<Awaited<ReturnType<typeof createStudent>>>;
export type CreateStudentMutationBody = UpdateStudentRequest;
export type CreateStudentMutationError = unknown;

export const useCreateStudent = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof createStudent>>,
        TError,
        { parentId: string; data: UpdateStudentRequest },
        TContext
    >;
}): UseMutationResult<
    Awaited<ReturnType<typeof createStudent>>,
    TError,
    { parentId: string; data: UpdateStudentRequest },
    TContext
> => {
    const mutationOptions = getCreateStudentMutationOptions(options);

    return useMutation(mutationOptions);
};

export const updateStudent = (
    parentId: string,
    studentId: string,
    updateStudentRequest: UpdateStudentRequest,
) => {
    return customInstance<UpdateStudent200>({
        url: `/user/parent/${parentId}/student/${studentId}`,
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        data: updateStudentRequest,
    });
};

export const getUpdateStudentMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof updateStudent>>,
        TError,
        { parentId: string; studentId: string; data: UpdateStudentRequest },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof updateStudent>>,
    TError,
    { parentId: string; studentId: string; data: UpdateStudentRequest },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof updateStudent>>,
        { parentId: string; studentId: string; data: UpdateStudentRequest }
    > = (props) => {
        const { parentId, studentId, data } = props ?? {};

        return updateStudent(parentId, studentId, data);
    };

    return { mutationFn, ...mutationOptions };
};

export type UpdateStudentMutationResult = NonNullable<Awaited<ReturnType<typeof updateStudent>>>;
export type UpdateStudentMutationBody = UpdateStudentRequest;
export type UpdateStudentMutationError = unknown;

export const useUpdateStudent = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof updateStudent>>,
        TError,
        { parentId: string; studentId: string; data: UpdateStudentRequest },
        TContext
    >;
}): UseMutationResult<
    Awaited<ReturnType<typeof updateStudent>>,
    TError,
    { parentId: string; studentId: string; data: UpdateStudentRequest },
    TContext
> => {
    const mutationOptions = getUpdateStudentMutationOptions(options);

    return useMutation(mutationOptions);
};

export const deleteStudent = (parentId: string, studentId: string) => {
    return customInstance<DeleteStudent200>({
        url: `/user/parent/${parentId}/student/${studentId}`,
        method: 'DELETE',
    });
};

export const getDeleteStudentMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteStudent>>,
        TError,
        { parentId: string; studentId: string },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof deleteStudent>>,
    TError,
    { parentId: string; studentId: string },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof deleteStudent>>,
        { parentId: string; studentId: string }
    > = (props) => {
        const { parentId, studentId } = props ?? {};

        return deleteStudent(parentId, studentId);
    };

    return { mutationFn, ...mutationOptions };
};

export type DeleteStudentMutationResult = NonNullable<Awaited<ReturnType<typeof deleteStudent>>>;

export type DeleteStudentMutationError = unknown;

export const useDeleteStudent = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteStudent>>,
        TError,
        { parentId: string; studentId: string },
        TContext
    >;
}): UseMutationResult<
    Awaited<ReturnType<typeof deleteStudent>>,
    TError,
    { parentId: string; studentId: string },
    TContext
> => {
    const mutationOptions = getDeleteStudentMutationOptions(options);

    return useMutation(mutationOptions);
};

export const getChat = (params?: GetChatParams, signal?: AbortSignal) => {
    return customInstance<GetChat200>({ url: `/message`, method: 'GET', params, signal });
};

export const getGetChatQueryKey = (params?: GetChatParams) => {
    return [`/message`, ...(params ? [params] : [])] as const;
};

export const getGetChatQueryOptions = <
    TData = Awaited<ReturnType<typeof getChat>>,
    TError = unknown,
>(
    params?: GetChatParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getChat>>, TError, TData>>;
    },
) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetChatQueryKey(params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getChat>>> = ({ signal }) =>
        getChat(params, signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getChat>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetChatQueryResult = NonNullable<Awaited<ReturnType<typeof getChat>>>;
export type GetChatQueryError = unknown;

export function useGetChat<TData = Awaited<ReturnType<typeof getChat>>, TError = unknown>(
    params: undefined | GetChatParams,
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getChat>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<Awaited<ReturnType<typeof getChat>>, TError, TData>,
                'initialData'
            >;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetChat<TData = Awaited<ReturnType<typeof getChat>>, TError = unknown>(
    params?: GetChatParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getChat>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<Awaited<ReturnType<typeof getChat>>, TError, TData>,
                'initialData'
            >;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetChat<TData = Awaited<ReturnType<typeof getChat>>, TError = unknown>(
    params?: GetChatParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getChat>>, TError, TData>>;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetChat<TData = Awaited<ReturnType<typeof getChat>>, TError = unknown>(
    params?: GetChatParams,
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getChat>>, TError, TData>>;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetChatQueryOptions(params, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const sendMessage = (chatId: string, textBody: TextBody) => {
    return customInstance<SendMessage200>({
        url: `/message/${chatId}`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: textBody,
    });
};

export const getSendMessageMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof sendMessage>>,
        TError,
        { chatId: string; data: TextBody },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof sendMessage>>,
    TError,
    { chatId: string; data: TextBody },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof sendMessage>>,
        { chatId: string; data: TextBody }
    > = (props) => {
        const { chatId, data } = props ?? {};

        return sendMessage(chatId, data);
    };

    return { mutationFn, ...mutationOptions };
};

export type SendMessageMutationResult = NonNullable<Awaited<ReturnType<typeof sendMessage>>>;
export type SendMessageMutationBody = TextBody;
export type SendMessageMutationError = unknown;

export const useSendMessage = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof sendMessage>>,
        TError,
        { chatId: string; data: TextBody },
        TContext
    >;
}): UseMutationResult<
    Awaited<ReturnType<typeof sendMessage>>,
    TError,
    { chatId: string; data: TextBody },
    TContext
> => {
    const mutationOptions = getSendMessageMutationOptions(options);

    return useMutation(mutationOptions);
};

/**
 * Ping .. pong
 */
export const classHeartbeat = (signal?: AbortSignal) => {
    return customInstance<ClassHeartbeat200>({ url: `/heartbeat`, method: 'GET', signal });
};

export const getClassHeartbeatQueryKey = () => {
    return [`/heartbeat`] as const;
};

export const getClassHeartbeatQueryOptions = <
    TData = Awaited<ReturnType<typeof classHeartbeat>>,
    TError = unknown,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof classHeartbeat>>, TError, TData>>;
}) => {
    const { query: queryOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getClassHeartbeatQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof classHeartbeat>>> = ({ signal }) =>
        classHeartbeat(signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof classHeartbeat>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type ClassHeartbeatQueryResult = NonNullable<Awaited<ReturnType<typeof classHeartbeat>>>;
export type ClassHeartbeatQueryError = unknown;

export function useClassHeartbeat<
    TData = Awaited<ReturnType<typeof classHeartbeat>>,
    TError = unknown,
>(options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof classHeartbeat>>, TError, TData>> &
        Pick<
            DefinedInitialDataOptions<Awaited<ReturnType<typeof classHeartbeat>>, TError, TData>,
            'initialData'
        >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useClassHeartbeat<
    TData = Awaited<ReturnType<typeof classHeartbeat>>,
    TError = unknown,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof classHeartbeat>>, TError, TData>> &
        Pick<
            UndefinedInitialDataOptions<Awaited<ReturnType<typeof classHeartbeat>>, TError, TData>,
            'initialData'
        >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useClassHeartbeat<
    TData = Awaited<ReturnType<typeof classHeartbeat>>,
    TError = unknown,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof classHeartbeat>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useClassHeartbeat<
    TData = Awaited<ReturnType<typeof classHeartbeat>>,
    TError = unknown,
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof classHeartbeat>>, TError, TData>>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getClassHeartbeatQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const login = (loginBody: LoginBody) => {
    return customInstance<Login200>({
        url: `/auth/login`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: loginBody,
    });
};

export const getLoginMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof login>>,
        TError,
        { data: LoginBody },
        TContext
    >;
}): UseMutationOptions<
    Awaited<ReturnType<typeof login>>,
    TError,
    { data: LoginBody },
    TContext
> => {
    const { mutation: mutationOptions } = options ?? {};

    const mutationFn: MutationFunction<Awaited<ReturnType<typeof login>>, { data: LoginBody }> = (
        props,
    ) => {
        const { data } = props ?? {};

        return login(data);
    };

    return { mutationFn, ...mutationOptions };
};

export type LoginMutationResult = NonNullable<Awaited<ReturnType<typeof login>>>;
export type LoginMutationBody = LoginBody;
export type LoginMutationError = unknown;

export const useLogin = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof login>>,
        TError,
        { data: LoginBody },
        TContext
    >;
}): UseMutationResult<Awaited<ReturnType<typeof login>>, TError, { data: LoginBody }, TContext> => {
    const mutationOptions = getLoginMutationOptions(options);

    return useMutation(mutationOptions);
};
